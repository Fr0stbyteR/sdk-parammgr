{
  "version": 3,
  "sources": ["../src/CompositeAudioNode.js", "../src/sdk/src/WebAudioModule.js", "../src/sdk/src/RingBuffer.js", "../src/sdk/src/WamArrayRingBuffer.js", "../src/sdk/src/WamEnv.js", "../src/sdk/src/WamEventRingBuffer.js", "../src/sdk/src/addFunctionModule.js", "../src/sdk/src/WamParameter.js", "../src/sdk/src/WamParameterInfo.js", "../src/sdk/src/WamParameterInterpolator.js", "../src/sdk/src/WamProcessor.js", "../src/sdk/src/WamNode.js", "../src/ParamMgrProcessor.js", "../src/ParamConfigurator.js", "../src/MgrAudioParam.js", "../src/ParamMgrNode.js", "../src/ParamMgrFactory.js"],
  "sourcesContent": ["/** @typedef {import('@webaudiomodules/api').WamNode} WamNode */\n/** @typedef {import('@webaudiomodules/api').WebAudioModule} WebAudioModule */\n\n/**\n * @implements {WamNode}\n */\nexport default class CompositeAudioNode extends GainNode {\n\tget processorId() {\n\t\treturn this._wamNode.processorId;\n\t}\n\n\tget instanceId() {\n\t\treturn this._wamNode.instanceId;\n\t}\n\n\tget module() {\n\t\treturn this._wamNode.module;\n\t}\n\n\t/**\n\t * @param {Parameters<WamNode['getParameterInfo']>} args\n\t */\n\tgetParameterInfo(...args) {\n\t\treturn this._wamNode.getParameterInfo(...args);\n\t}\n\n\t/**\n\t * @param {Parameters<WamNode['getParameterValues']>} args\n\t */\n\tgetParameterValues(...args) {\n\t\treturn this._wamNode.getParameterValues(...args);\n\t}\n\n\t/**\n\t * @param {Parameters<WamNode['setParameterValues']>} args\n\t */\n\tsetParameterValues(...args) {\n\t\treturn this._wamNode.setParameterValues(...args);\n\t}\n\n\tgetState() {\n\t\treturn this._wamNode.getState();\n\t}\n\n\t/**\n\t * @param {Parameters<WamNode['setState']>} args\n\t */\n\tsetState(...args) {\n\t\treturn this._wamNode.setState(...args);\n\t}\n\n\tgetCompensationDelay() {\n\t\treturn this._wamNode.getCompensationDelay();\n\t}\n\n\t/**\n\t * @param {Parameters<WamNode['scheduleEvents']>} args\n\t */\n\tscheduleEvents(...args) {\n\t\treturn this._wamNode.scheduleEvents(...args);\n\t}\n\n\tclearEvents() {\n\t\treturn this._wamNode.clearEvents();\n\t}\n\n\t/**\n\t * @param {Parameters<WamNode['connectEvents']>} args\n\t */\n\tconnectEvents(...args) {\n\t\treturn this._wamNode.connectEvents(...args);\n\t}\n\n\t/**\n\t * @param {Parameters<WamNode['disconnectEvents']>} args\n\t */\n\tdisconnectEvents(...args) {\n\t\treturn this._wamNode.disconnectEvents(...args);\n\t}\n\n\tdestroy() {\n\t\treturn this._wamNode.destroy();\n\t}\n\n\t/**\n\t * @type {AudioNode}\n\t */\n\t_output = undefined;\n\n\t/**\n\t * @type {WamNode}\n\t */\n\t_wamNode = undefined;\n\n\tset channelCount(count) {\n\t\tif (this._output) this._output.channelCount = count;\n\t\telse super.channelCount = count;\n\t}\n\n\tget channelCount() {\n\t\tif (this._output) return this._output.channelCount;\n\t\treturn super.channelCount;\n\t}\n\n\tset channelCountMode(mode) {\n\t\tif (this._output) this._output.channelCountMode = mode;\n\t\telse super.channelCountMode = mode;\n\t}\n\n\tget channelCountMode() {\n\t\tif (this._output) return this._output.channelCountMode;\n\t\treturn super.channelCountMode;\n\t}\n\n\tset channelInterpretation(interpretation) {\n\t\tif (this._output) this._output.channelInterpretation = interpretation;\n\t\telse super.channelInterpretation = interpretation;\n\t}\n\n\tget channelInterpretation() {\n\t\tif (this._output) return this._output.channelInterpretation;\n\t\treturn super.channelInterpretation;\n\t}\n\n\tget numberOfInputs() {\n\t\treturn super.numberOfInputs;\n\t}\n\n\tget numberOfOutputs() {\n\t\tif (this._output) return this._output.numberOfOutputs;\n\t\treturn super.numberOfOutputs;\n\t}\n\n\tget gain() {\n\t\treturn undefined;\n\t}\n\n\tconnect(...args) {\n\t\t// @ts-ignore\n\t\tif (this._output && this._output !== this) return this._output.connect(...args);\n\t\t// @ts-ignore\n\t\treturn super.connect(...args);\n\t}\n\n\tdisconnect(...args) {\n\t\t// @ts-ignore\n\t\tif (this._output && this._output !== this) return this._output.disconnect(...args);\n\t\t// @ts-ignore\n\t\treturn super.disconnect(...args);\n\t}\n}\n", "/** @typedef {import('@webaudiomodules/api').WamDescriptor} WamDescriptor */\n/** @typedef {import('@webaudiomodules/api').WamNode} WamNode */\n/** @template T @typedef {import('@webaudiomodules/api').WebAudioModule} IWebAudioModule<T> */\n\n/** @implements {IWebAudioModule<WamNode>} */\nclass WebAudioModule {\n\tstatic get isWebAudioModuleConstructor() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @param {BaseAudioContext} audioContext\n\t * @param {any} [initialState]\n\t * @returns {Promise<IWebAudioModule<any>>}\n\t */\n\tstatic createInstance(audioContext, initialState) {\n\t\treturn new this(audioContext).initialize(initialState);\n\t}\n\n\t/** @param {BaseAudioContext} audioContext */\n\tconstructor(audioContext) {\n\t\tthis._audioContext = audioContext;\n\t\tthis._initialized = false;\n\t\t/** @type {WamNode} */\n\t\tthis._audioNode = undefined;\n\t\tthis._timestamp = performance.now();\n\t\t/**\n\t\t * Url to load the plugin's GUI HTML\n\t\t * @type {string}\n\t\t */\n\t\tthis._guiModuleUrl = undefined;\n\t\t/**\n\t\t * Url to load the plugin's `descriptor.json`\n\t\t * @type {string}\n\t\t */\n\t\tthis._descriptorUrl = './descriptor.json';\n\t\t/** @type {WamDescriptor} */\n\t\tthis._descriptor = {\n\t\t\tname: `WebAudioModule_${this.constructor.name}`,\n\t\t\tvendor: 'WebAudioModuleVendor',\n\t\t\tdescription: '',\n\t\t\tversion: '0.0.0',\n\t\t\tapiVersion: '2.0.0',\n\t\t\tthumbnail: '',\n\t\t\tkeywords: [],\n\t\t\tisInstrument: false,\n\t\t\twebsite: '',\n\t\t\thasAudioInput: true,\n\t\t\thasAudioOutput: true,\n\t\t\thasAutomationInput: true,\n\t\t\thasAutomationOutput: true,\n\t\t\thasMidiInput: true,\n\t\t\thasMidiOutput: true,\n\t\t\thasMpeInput: true,\n\t\t\thasMpeOutput: true,\n\t\t\thasOscInput: true,\n\t\t\thasOscOutput: true,\n\t\t\thasSysexInput: true,\n\t\t\thasSysexOutput: true,\n\t\t};\n\t}\n\n\tget isWebAudioModule() {\n\t\treturn true;\n\t}\n\n\tget moduleId() { return this.vendor + this.name; }\n\n\tget instanceId() { return this.moduleId + this._timestamp; }\n\n\tget descriptor() { return this._descriptor; }\n\n\tget name() { return this.descriptor.name; }\n\n\tget vendor() { return this.descriptor.vendor; }\n\n\tget audioContext() {\n\t\treturn this._audioContext;\n\t}\n\n\tget audioNode() {\n\t\tif (!this.initialized) console.warn('WAM should be initialized before getting the audioNode');\n\t\treturn this._audioNode;\n\t}\n\n\tset audioNode(node) {\n\t\tthis._audioNode = node;\n\t}\n\n\tget initialized() {\n\t\treturn this._initialized;\n\t}\n\n\tset initialized(value) {\n\t\tthis._initialized = value;\n\t}\n\n\t/**\n\t * @param {any} [initialState]\n\t * @returns {Promise<WamNode>}\n\t */\n\tasync createAudioNode(initialState) {\n\t\t// should return a subclass of WamNode\n\t\tthrow new TypeError('createAudioNode() not provided');\n\t}\n\n\t/**\n\t * @param {any} [state]\n\t * @returns {Promise<WebAudioModule>}\n\t */\n\tasync initialize(state) {\n\t\t// await this._loadDescriptor();\n\t\tif (!this._audioNode) this.audioNode = await this.createAudioNode();\n\t\tthis.initialized = true;\n\t\treturn this;\n\t}\n\n\tasync _loadGui() {\n\t\tconst url = this._guiModuleUrl;\n\t\tif (!url) throw new TypeError('Gui module not found');\n\t\t// @ts-ignore\n\t\treturn import(/* webpackIgnore: true */url);\n\t}\n\n\tasync _loadDescriptor() {\n\t\tconst url = this._descriptorUrl;\n\t\tif (!url) throw new TypeError('Descriptor not found');\n\t\tconst response = await fetch(url);\n\t\tconst descriptor = await response.json();\n\t\tObject.assign(this._descriptor, descriptor);\n\t\treturn this._descriptor;\n\t}\n\n\t/**\n\t * @returns {Promise<HTMLElement>}\n\t */\n\tasync createGui() {\n\t\tif (!this.initialized) console.warn('Plugin should be initialized before getting the gui');\n\t\t// Do not fail if no gui is present, just return undefined\n\t\tif (!this._guiModuleUrl) return undefined;\n\t\tconst { createElement } = await this._loadGui();\n\t\treturn createElement(this);\n\t}\n\n\tdestroyGui() {}\n}\n\nexport default WebAudioModule;\n", "/** @typedef {import('./types').TypedArrayConstructor} TypedArrayConstructor */\n/** @typedef {import('./types').TypedArray} TypedArray */\n/** @typedef {import('./types').RingBuffer} IRingBuffer */\n/** @typedef {typeof import('./types').RingBuffer} RingBufferConstructor */\n/** @typedef {import('@webaudiomodules/api').AudioWorkletGlobalScope} AudioWorkletGlobalScope */\n/** @typedef {import('./types').WamSDKBaseModuleScope} WamSDKBaseModuleScope */\n\n/**\n * @param {string} [moduleId]\n * @returns {RingBufferConstructor}\n */\nconst getRingBuffer = (moduleId) => {\n\t/** @type {AudioWorkletGlobalScope} */\n\t// @ts-ignore\n\tconst audioWorkletGlobalScope = globalThis;\n\n\t/**\n\t * A Single Producer - Single Consumer thread-safe wait-free ring buffer.\n\t * The producer and the consumer can be on separate threads, but cannot change roles,\n\t * except with external synchronization. Adapted from https://github.com/padenot/ringbuf.js\n\t * MPL-2.0 License (see RingBuffer_LICENSE.txt)\n\t *\n\t * @implements {IRingBuffer}\n\t * @author padenot\n\t */\n\tclass RingBuffer {\n\t\t/**\n\t\t * @param {number} capacity\n\t\t * @param {TypedArrayConstructor} Type\n\t\t */\n\t\tstatic getStorageForCapacity(capacity, Type) {\n\t\t\tif (!Type.BYTES_PER_ELEMENT) {\n\t\t\t\tthrow new Error('Pass in a ArrayBuffer subclass');\n\t\t\t}\n\t\t\tconst bytes = 8 + (capacity + 1) * Type.BYTES_PER_ELEMENT;\n\t\t\treturn new SharedArrayBuffer(bytes);\n\t\t}\n\n\t\t/**\n\t\t * `sab` is a SharedArrayBuffer with a capacity calculated by calling\n\t\t * `getStorageForCapacity` with the desired capacity.\n\t\t *\n\t\t * @param {SharedArrayBuffer} sab\n\t\t * @param {TypedArrayConstructor} Type\n\t\t */\n\t\tconstructor(sab, Type) {\n\t\t\t// eslint-disable-next-line no-prototype-builtins\n\t\t\tif (!Type.BYTES_PER_ELEMENT) {\n\t\t\t\tthrow new Error('Pass a concrete typed array class as second argument');\n\t\t\t}\n\n\t\t\t// Maximum usable size is 1<<32 - type.BYTES_PER_ELEMENT bytes in the ring\n\t\t\t// buffer for this version, easily changeable.\n\t\t\t// -4 for the write ptr (uint32_t offsets)\n\t\t\t// -4 for the read ptr (uint32_t offsets)\n\t\t\t// capacity counts the empty slot to distinguish between full and empty.\n\t\t\tthis._Type = Type;\n\t\t\tthis._capacity = (sab.byteLength - 8) / Type.BYTES_PER_ELEMENT;\n\t\t\tthis.buf = sab;\n\t\t\tthis.write_ptr = new Uint32Array(this.buf, 0, 1);\n\t\t\tthis.read_ptr = new Uint32Array(this.buf, 4, 1);\n\t\t\tthis.storage = new Type(this.buf, 8, this._capacity);\n\t\t}\n\n\t\t/**\n\t\t * Returns the type of the underlying ArrayBuffer for this RingBuffer. This\n\t\t * allows implementing crude type checking.\n\t\t */\n\t\tget type() {\n\t\t\treturn this._Type.name;\n\t\t}\n\n\t\t/**\n\t\t * Push bytes to the ring buffer. `elements` is a typed array of the same type\n\t\t * as passed in the ctor, to be written to the queue.\n\t\t * Returns the number of elements written to the queue.\n\t\t *\n\t\t * @param {TypedArray} elements\n\t\t */\n\t\tpush(elements) {\n\t\t\tconst rd = Atomics.load(this.read_ptr, 0);\n\t\t\tconst wr = Atomics.load(this.write_ptr, 0);\n\n\t\t\tif ((wr + 1) % this._storageCapacity() === rd) {\n\t\t\t\t// full\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tconst toWrite = Math.min(this._availableWrite(rd, wr), elements.length);\n\t\t\tconst firstPart = Math.min(this._storageCapacity() - wr, toWrite);\n\t\t\tconst secondPart = toWrite - firstPart;\n\n\t\t\tthis._copy(elements, 0, this.storage, wr, firstPart);\n\t\t\tthis._copy(elements, firstPart, this.storage, 0, secondPart);\n\n\t\t\t// publish the enqueued data to the other side\n\t\t\tAtomics.store(\n\t\t\t\tthis.write_ptr,\n\t\t\t\t0,\n\t\t\t\t(wr + toWrite) % this._storageCapacity(),\n\t\t\t);\n\n\t\t\treturn toWrite;\n\t\t}\n\n\t\t/**\n\t\t * Read `elements.length` elements from the ring buffer if `elements` is a typed\n\t\t * array of the same type as passed in the ctor. If `elements` is an integer,\n\t\t * pop and discard that many elements from the ring buffer.\n\t\t * Returns the number of elements read from the queue, they are placed at the\n\t\t * beginning of the array passed as parameter if `elements` is not an integer.\n\t\t *\n\t\t * @param {TypedArray | number} elements\n\t\t */\n\t\tpop(elements) {\n\t\t\tconst rd = Atomics.load(this.read_ptr, 0);\n\t\t\tconst wr = Atomics.load(this.write_ptr, 0);\n\n\t\t\tif (wr === rd) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tconst isArray = !Number.isInteger(elements);\n\t\t\t// @ts-ignore\n\t\t\tconst toRead = Math.min(this._availableRead(rd, wr), isArray ? elements.length : elements);\n\n\t\t\tif (isArray) {\n\t\t\t\tconst firstPart = Math.min(this._storageCapacity() - rd, toRead);\n\t\t\t\tconst secondPart = toRead - firstPart;\n\n\t\t\t\t// @ts-ignore\n\t\t\t\tthis._copy(this.storage, rd, elements, 0, firstPart);\n\t\t\t\t// @ts-ignore\n\t\t\t\tthis._copy(this.storage, 0, elements, firstPart, secondPart);\n\t\t\t}\n\t\t\tAtomics.store(this.read_ptr, 0, (rd + toRead) % this._storageCapacity());\n\n\t\t\treturn toRead;\n\t\t}\n\n\t\t/**\n\t\t * True if the ring buffer is empty false otherwise. This can be late on the\n\t\t * reader side: it can return true even if something has just been pushed.\n\t\t */\n\t\tget empty() {\n\t\t\tconst rd = Atomics.load(this.read_ptr, 0);\n\t\t\tconst wr = Atomics.load(this.write_ptr, 0);\n\n\t\t\treturn wr === rd;\n\t\t}\n\n\t\t/**\n\t\t * True if the ring buffer is full, false otherwise. This can be late on the\n\t\t * write side: it can return true when something has just been popped.\n\t\t */\n\t\tget full() {\n\t\t\tconst rd = Atomics.load(this.read_ptr, 0);\n\t\t\tconst wr = Atomics.load(this.write_ptr, 0);\n\n\t\t\treturn (wr + 1) % this._capacity !== rd;\n\t\t}\n\n\t\t/**\n\t\t * The usable capacity for the ring buffer: the number of elements that can be\n\t\t * stored.\n\t\t */\n\t\tget capacity() {\n\t\t\treturn this._capacity - 1;\n\t\t}\n\n\t\t/**\n\t\t * Number of elements available for reading. This can be late, and report less\n\t\t * elements that is actually in the queue, when something has just been\n\t\t * enqueued.\n\t\t */\n\t\tget availableRead() {\n\t\t\tconst rd = Atomics.load(this.read_ptr, 0);\n\t\t\tconst wr = Atomics.load(this.write_ptr, 0);\n\t\t\treturn this._availableRead(rd, wr);\n\t\t}\n\n\t\t/**\n\t\t * Number of elements available for writing. This can be late, and report less\n\t\t * elements that is actually available for writing, when something has just\n\t\t * been dequeued.\n\t\t */\n\t\tget availableWrite() {\n\t\t\tconst rd = Atomics.load(this.read_ptr, 0);\n\t\t\tconst wr = Atomics.load(this.write_ptr, 0);\n\t\t\treturn this._availableWrite(rd, wr);\n\t\t}\n\n\t\t// private methods //\n\n\t\t/**\n\t\t * Number of elements available for reading, given a read and write pointer..\n\t\t *\n\t\t * @param {number} rd\n\t\t * @param {number} wr\n\t\t */\n\t\t_availableRead(rd, wr) {\n\t\t\tif (wr > rd) {\n\t\t\t\treturn wr - rd;\n\t\t\t}\n\t\t\treturn wr + this._storageCapacity() - rd;\n\t\t}\n\n\t\t/**\n\t\t * Number of elements available from writing, given a read and write pointer.\n\t\t *\n\t\t * @param {number} rd\n\t\t * @param {number} wr\n\t\t */\n\t\t_availableWrite(rd, wr) {\n\t\t\tlet rv = rd - wr - 1;\n\t\t\tif (wr >= rd) {\n\t\t\t\trv += this._storageCapacity();\n\t\t\t}\n\t\t\treturn rv;\n\t\t}\n\n\t\t/**\n\t\t * The size of the storage for elements not accounting the space for the index.\n\t\t */\n\t\t_storageCapacity() {\n\t\t\treturn this._capacity;\n\t\t}\n\n\t\t/**\n\t\t * Copy `size` elements from `input`, starting at offset `offset_input`, to\n\t\t * `output`, starting at offset `offset_output`.\n\t\t *\n\t\t * @param {TypedArray} input\n\t\t * @param {number} offsetInput\n\t\t * @param {TypedArray} output\n\t\t * @param {number} offsetOutput\n\t\t * @param {number} size\n\t\t */\n\t\t_copy(input, offsetInput, output, offsetOutput, size) {\n\t\t\tfor (let i = 0; i < size; i++) {\n\t\t\t\toutput[offsetOutput + i] = input[offsetInput + i];\n\t\t\t}\n\t\t}\n\t}\n\n\tif (audioWorkletGlobalScope.AudioWorkletProcessor) {\n\t\t/** @type {WamSDKBaseModuleScope} */\n\t\tconst ModuleScope = audioWorkletGlobalScope.webAudioModules.getModuleScope(moduleId);\n\n\t\tif (!ModuleScope.RingBuffer) ModuleScope.RingBuffer = RingBuffer;\n\t}\n\n\treturn RingBuffer;\n};\n\nexport default getRingBuffer;\n\n/* Usage in main thread:\nimport executable from 'RingBuffer.js';\nconst RingBuffer = executable();\n*/\n\n/* Usage in audio thread:\n// in main thread:\naudioWorklet.addModule('RingBuffer.js');\n// in audio thread\nconst { RingBuffer } = globalThis;\n*/\n\n/* Usage in audio thread with a build system:\n// in main thread:\nimport getRingBuffer from 'RingBuffer.js';\nconst blob = new Blob([`(${getRingBuffer.toString()})(JSON.stringify(moduleId));`], { type: 'text/javascript' });\nconst url = window.URL.createObjectURL(blob);\naudioWorklet.addModule(url);\n// in audio thread\nconst { RingBuffer } = globalThis.webAudioModules.dependencies[moduleId];\n*/\n", "/** @typedef {import('@webaudiomodules/api').AudioWorkletGlobalScope} AudioWorkletGlobalScope */\n/** @typedef {typeof import('./types').RingBuffer} RingBufferConstructor */\n/** @typedef {import('./types').RingBuffer} RingBuffer */\n/** @typedef {import('./types').TypedArray} TypedArray */\n/** @typedef {import('./types').TypedArrayConstructor} TypedArrayConstructor */\n/** @typedef {import('./types').WamArrayRingBuffer} IWamArrayRingBuffer */\n/** @typedef {typeof import('./types').WamArrayRingBuffer} WamArrayRingBufferConstructor */\n/** @typedef {import('./types').WamSDKBaseModuleScope} WamSDKBaseModuleScope */\n\n/**\n * @param {string} [moduleId]\n * @returns {WamArrayRingBufferConstructor}\n */\nconst getWamArrayRingBuffer = (moduleId) => {\n\t/** @type {AudioWorkletGlobalScope} */\n\t// @ts-ignore\n\tconst audioWorkletGlobalScope = globalThis;\n\n\t/**\n\t * @implements {IWamArrayRingBuffer}\n\t */\n\tclass WamArrayRingBuffer {\n\t\t/**\n\t\t * Default number of arrays for which memory will be allocated.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tstatic DefaultArrayCapacity = 2;\n\n\t\t/**\n\t\t * Returns a SharedArrayBuffer large enough to safely store the\n\t\t * specified number of arrays of the specified length. Specify\n\t\t * `maxArrayCapacity` to support storing more than\n\t\t * `DefaultArrayCapacity` arrays in the buffer.\n\t\t *\n\t\t * @param {RingBufferConstructor} RingBuffer\n\t\t * @param {number} arrayLength\n\t\t * @param {TypedArrayConstructor} arrayType\n\t\t * @param {number} [maxArrayCapacity=undefined]\n\t\t * @returns {SharedArrayBuffer}\n\t\t */\n\t\tstatic getStorageForEventCapacity(RingBuffer, arrayLength, arrayType, maxArrayCapacity = undefined) {\n\t\t\tif (maxArrayCapacity === undefined) maxArrayCapacity = WamArrayRingBuffer.DefaultArrayCapacity;\n\t\t\telse maxArrayCapacity = Math.max(maxArrayCapacity, WamArrayRingBuffer.DefaultArrayCapacity);\n\t\t\tif (!arrayType.BYTES_PER_ELEMENT) {\n\t\t\t\tthrow new Error('Pass in a ArrayBuffer subclass');\n\t\t\t}\n\t\t\tconst capacity = arrayLength * maxArrayCapacity;\n\t\t\treturn RingBuffer.getStorageForCapacity(capacity, arrayType);\n\t\t}\n\n\t\t/**\n\t\t * Provides methods for writing / reading arrays to / from a\n\t\t * RingBuffer. Specify `maxArrayCapacity` to support storing more\n\t \t * than `DefaultArrayCapacity` arrays in the buffer.\n\t\t *\n\t\t * @param {RingBufferConstructor} RingBuffer\n\t\t * @param {SharedArrayBuffer} sab\n\t\t * @param {number} arrayLength\n\t\t * @param {TypedArrayConstructor} arrayType\n\t\t * @param {number} [maxArrayCapacity=undefined]\n\t\t */\n\t\tconstructor(RingBuffer, sab, arrayLength, arrayType, maxArrayCapacity = undefined) {\n\t\t\tif (!arrayType.BYTES_PER_ELEMENT) {\n\t\t\t\tthrow new Error('Pass in a ArrayBuffer subclass');\n\t\t\t}\n\n\t\t\t/** @type {number} */\n\t\t\tthis._arrayLength = arrayLength;\n\n\t\t\t/** @type {TypedArrayConstructor} */\n\t\t\tthis._arrayType = arrayType;\n\n\t\t\t/** @type {number} */\n\t\t\tthis._arrayElementSizeBytes = arrayType.BYTES_PER_ELEMENT;\n\n\t\t\t/** @type {number} */\n\t\t\tthis._arraySizeBytes = this._arrayLength * this._arrayElementSizeBytes;\n\n\t\t\t/** @type {SharedArrayBuffer} */\n\t\t\tthis._sab = sab;\n\n\t\t\tif (maxArrayCapacity === undefined) maxArrayCapacity = WamArrayRingBuffer.DefaultArrayCapacity;\n\t\t\telse maxArrayCapacity = Math.max(maxArrayCapacity, WamArrayRingBuffer.DefaultArrayCapacity);\n\n\t\t\t/** @type {TypedArray} */\n\t\t\tthis._arrayArray = new arrayType(this._arrayLength);\n\n\t\t\t/** @type {RingBuffer} */\n\t\t\tthis._rb = new RingBuffer(this._sab, arrayType);\n\t\t}\n\n\t\t/**\n\t\t * Attempt to write array to the ring buffer, returning whether\n\t\t * or not it was successfully written.\n\t\t *\n\t\t * @param {TypedArray} array\n\t\t * @returns {boolean}\n\t\t */\n\t\twrite(array) {\n\t\t\tif (array.length !== this._arrayLength) return false;\n\t\t\tconst elementsAvailable = this._rb.availableWrite;\n\t\t\tif (elementsAvailable < this._arrayLength) return false;\n\n\t\t\tlet success = true;\n\t\t\tconst elementsWritten = this._rb.push(array);\n\t\t\tif (elementsWritten != this._arrayLength) success = false;\n\t\t\treturn success;\n\t\t}\n\n\t\t/**\n\t\t * Attempt to read array from the ring buffer, returning whether\n\t\t * or not it was successfully read. If `newest` is true, skips\n\t\t * all pending arrays but the most recently written one.\n\t\t *\n\t\t * @param {TypedArray} array\n\t\t * @param {boolean} newest\n\t\t * @returns {boolean}\n\t\t */\n\t\tread(array, newest) {\n\t\t\tif (array.length !== this._arrayLength) return false;\n\t\t\tconst elementsAvailable = this._rb.availableRead;\n\t\t\tif (elementsAvailable < this._arrayLength) return false;\n\n\t\t\t// skip all but most recently written array?\n\t\t\tif (newest && elementsAvailable > this._arrayLength) this._rb.pop(elementsAvailable - this._arrayLength);\n\n\t\t\tlet success = false;\n\t\t\tconst elementsRead = this._rb.pop(array);\n\t\t\tif (elementsRead === this._arrayLength) success = true;\n\t\t\treturn success;\n\t\t}\n\n\t}\n\n\tif (audioWorkletGlobalScope.AudioWorkletProcessor) {\n\t\t/** @type {WamSDKBaseModuleScope} */\n\t\tconst ModuleScope = audioWorkletGlobalScope.webAudioModules.getModuleScope(moduleId);\n\n\t\tif (!ModuleScope.WamArrayRingBuffer) ModuleScope.WamArrayRingBuffer = WamArrayRingBuffer;\n\t}\n\n\treturn WamArrayRingBuffer;\n};\n\nexport default getWamArrayRingBuffer;\n", "/** @typedef {import('@webaudiomodules/api').WamProcessor} IWamProcessor */\n/** @typedef {import('@webaudiomodules/api').WamEnv} IWamEnv */\n/** @typedef {import('@webaudiomodules/api').AudioWorkletGlobalScope} AudioWorkletGlobalScope */\n\n/**\n * @param {string} apiVersion\n */\nconst initializeWamEnv = (apiVersion) => {\n\t/**\n\t * @implements {IWamEnv}\n\t */\n\tclass WamEnv {\n\t\tconstructor() {\n\t\t\t/** @type {Record<string, any>} */\n\t\t\tthis._dependencies = {};\n\t\t\t/** @type {Map<IWamProcessor, Set<IWamProcessor>[]>} */\n\t\t\tthis._eventGraph = new Map();\n\t\t\t/** @type {Record<string, IWamProcessor>} */\n\t\t\tthis._processors = {};\n\t\t}\n\n\t\tget apiVersion() {\n\t\t\treturn apiVersion;\n\t\t}\n\n\t\t/**\n\t\t * @param {IWamProcessor} wam\n\t\t */\n\t\tcreate(wam) {\n\t\t\tthis._processors[wam.instanceId] = wam;\n\t\t\t// console.log('create', this);\n\t\t}\n\n\t\t/**\n\t\t * \n\t\t * @param {string} moduleId \n\t\t * @returns {Record<string, any>}\n\t\t */\n\t\tgetModuleScope(moduleId) {\n\t\t\tif (!this._dependencies[moduleId]) this._dependencies[moduleId] = {};\n\t\t\treturn this._dependencies[moduleId];\n\t\t}\n\n\t\t/**\n\t\t * @param {string} fromId\n\t\t * @param {string} toId\n\t\t * @param {number} [output]\n\t\t */\n\t\tconnectEvents(fromId, toId, output = 0) {\n\t\t\t/** @type {IWamProcessor} */\n\t\t\tconst from = this._processors[fromId];\n\t\t\t/** @type {IWamProcessor} */\n\t\t\tconst to = this._processors[toId];\n\n\t\t\t/** @type {Set<IWamProcessor>[]} */\n\t\t\tlet outputMap;\n\t\t\tif (this._eventGraph.has(from)) {\n\t\t\t\toutputMap = this._eventGraph.get(from);\n\t\t\t} else {\n\t\t\t\toutputMap = [];\n\t\t\t\tthis._eventGraph.set(from, outputMap);\n\t\t\t}\n\t\t\tif (outputMap[output]) {\n\t\t\t\toutputMap[output].add(to);\n\t\t\t} else {\n\t\t\t\tconst set = new Set();\n\t\t\t\tset.add(to);\n\t\t\t\toutputMap[output] = set;\n\t\t\t}\n\t\t\t// console.log('connectEvents', this);\n\t\t}\n\n\t\t/**\n\t\t * @param {string} fromId\n\t\t * @param {string} [toId]\n\t\t * @param {number} [output]\n\t\t */\n\t\tdisconnectEvents(fromId, toId, output) {\n\t\t\t/** @type {IWamProcessor} */\n\t\t\tconst from = this._processors[fromId];\n\t\t\t\n\t\t\tif (!this._eventGraph.has(from)) return;\n\t\t\tconst outputMap = this._eventGraph.get(from);\n\t\t\tif (typeof toId === 'undefined') {\n\t\t\t\toutputMap.forEach((set) => {\n\t\t\t\t\tif (set) set.clear();\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t} \n\t\t\t\n\t\t\t/** @type {IWamProcessor} */\n\t\t\tconst to = this._processors[toId];\n\n\t\t\tif (typeof output === 'undefined') {\n\t\t\t\toutputMap.forEach((set) => {\n\t\t\t\t\tif (set) set.delete(to);\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!outputMap[output]) return;\n\t\t\toutputMap[output].delete(to);\n\t\t\t// console.log('disconnectEvents', this);\n\t\t}\n\n\t\t/**\n\t\t * @param {IWamProcessor} from\n\t\t * @param  {...any} events \n\t\t */\n\t\temitEvents(from, ...events) {\n\t\t\tif (!this._eventGraph.has(from)) return;\n\t\t\tconst downstream = this._eventGraph.get(from);\n\t\t\tdownstream.forEach((set) => {\n\t\t\t\tif (set) set.forEach((wam) => wam.scheduleEvents(...events));\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {IWamProcessor} wam\n\t\t */\n\t\tdestroy(wam) {\n\t\t\tif (this._eventGraph.has(wam)) this._eventGraph.delete(wam);\n\t\t\tthis._eventGraph.forEach((outputMap) => {\n\t\t\t\toutputMap.forEach((set) => {\n\t\t\t\t\tif (set && set.has(wam)) set.delete(wam);\n\t\t\t\t});\n\t\t\t});\n\t\t\t// console.log('destroy', this);\n\t\t}\n\t}\n\n\t/** @type {AudioWorkletGlobalScope} */\n\t// @ts-ignore\n\tconst audioWorkletGlobalScope = globalThis;\n\tif (audioWorkletGlobalScope.AudioWorkletProcessor) {\n\t\tif (!audioWorkletGlobalScope.webAudioModules) audioWorkletGlobalScope.webAudioModules = new WamEnv();\n\t}\n\n\treturn WamEnv;\n};\n\n/** @type {AudioWorkletGlobalScope} */\n// @ts-ignore\nconst audioWorkletGlobalScope = globalThis;\nif (audioWorkletGlobalScope.AudioWorkletProcessor) {\n\tif (!audioWorkletGlobalScope.webAudioModules) initializeWamEnv(\"2.0.0\");\n}\n\nexport default initializeWamEnv;\n", "/** @typedef {import('@webaudiomodules/api').WamEvent} WamEvent */\n/** @typedef {import('@webaudiomodules/api').WamEventType} WamEventType */\n/** @typedef {import('@webaudiomodules/api').WamAutomationEvent} WamAutomationEvent */\n/** @typedef {import('@webaudiomodules/api').WamTransportEvent} WamTransportEvent */\n/** @typedef {import('@webaudiomodules/api').WamMidiEvent} WamMidiEvent */\n/** @typedef {import('@webaudiomodules/api').WamSysexEvent} WamSysexEvent */\n/** @typedef {import('@webaudiomodules/api').WamMpeEvent} WamMpeEvent */\n/** @typedef {import('@webaudiomodules/api').WamOscEvent} WamOscEvent */\n/** @typedef {import('@webaudiomodules/api').WamInfoEvent} WamInfoEvent */\n/** @typedef {import('@webaudiomodules/api').WamParameterData} WamParameterData */\n/** @typedef {import('@webaudiomodules/api').WamTransportData} WamTransportData */\n/** @typedef {import('@webaudiomodules/api').WamMidiData} WamMidiData */\n/** @typedef {import('@webaudiomodules/api').WamBinaryData} WamBinaryData */\n/** @typedef {import('@webaudiomodules/api').WamInfoData} WamInfoData */\n/** @typedef {import('@webaudiomodules/api').AudioWorkletGlobalScope} AudioWorkletGlobalScope */\n/** @typedef {typeof import('./types').RingBuffer} RingBufferConstructor */\n/** @typedef {import('./types').RingBuffer} RingBuffer */\n/** @typedef {import('./types').TypedArrayConstructor} TypedArrayConstructor */\n/** @typedef {import('./types').WamEventRingBuffer} IWamEventRingBuffer */\n/** @typedef {typeof import('./types').WamEventRingBuffer} WamEventRingBufferConstructor */\n/** @typedef {import('./types').WamSDKBaseModuleScope} WamSDKBaseModuleScope */\n\n/**\n * @param {string} [moduleId]\n * @returns {WamEventRingBufferConstructor}\n */\nconst getWamEventRingBuffer = (moduleId) => {\n\t/** @type {AudioWorkletGlobalScope} */\n\t// @ts-ignore\n\tconst audioWorkletGlobalScope = globalThis;\n\n\t/**\n\t * @implements {IWamEventRingBuffer}\n\t */\n\tclass WamEventRingBuffer {\n\n\t\t/**\n\t\t * Default number of additional bytes allocated\n\t\t * per event (to support variable-size event objects)\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tstatic DefaultExtraBytesPerEvent = 64;\n\n\t\t/**\n\t\t * Number of bytes required for WamEventBase\n\t\t * {uint32} total event size in bytes\n\t\t * {uint8} encoded event type\n\t\t * {float64} time\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tstatic WamEventBaseBytes = 4 + 1 + 8;\n\n\t\t/**\n\t\t * Number of bytes required for WamAutomationEvent\n\t\t * {WamEventBaseBytes} common event properties\n\t\t * {uint16} encoded parameter id\n\t\t * {float64} value\n\t\t * {uint8} normalized\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tstatic WamAutomationEventBytes = WamEventRingBuffer.WamEventBaseBytes + 2 + 8 + 1;\n\n\t\t/**\n\t\t * Number of bytes required for WamTransportEvent\n\t\t * {WamEventBaseBytes} common event properties\n\t\t * {uint32} current bar\n\t\t * {float64} currentBarStarted\n\t\t * {float64} tempo\n\t\t * {uint8} time signature numerator\n\t\t * {uint8} time signature denominator\n\t\t * {uint8} playing flag\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tstatic WamTransportEventBytes = WamEventRingBuffer.WamEventBaseBytes + 4 + 8 + 8 + 1 + 1 + 1;\n\n\t\t/**\n\t\t * Number of bytes required for WamMidiEvent or WamMpeEvent\n\t\t * {WamEventBaseBytes} common event properties\n\t\t * {uint8} status byte\n\t\t * {uint8} data1 byte\n\t\t * {uint8} data2 byte\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tstatic WamMidiEventBytes = WamEventRingBuffer.WamEventBaseBytes + 1 + 1 + 1;\n\n\t\t/**\n\t\t * Number of bytes required for WamSysexEvent or WamOscEvent\n\t\t * (total number depends on content of message / size of byte array)\n\t\t * {WamEventBaseBytes} common event properties\n\t\t * {uint32} number of bytes in binary array\n\t\t * {uint8[]} N bytes in binary array depending on message\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tstatic WamBinaryEventBytes = WamEventRingBuffer.WamEventBaseBytes + 4; // + N\n\n\t\t/**\n\t\t * Returns a SharedArrayBuffer large enough to safely store\n\t\t * the specified number of events. Specify 'maxBytesPerEvent'\n\t\t * to support variable-size binary event types like sysex or osc.\n\t\t *\n\t\t * @param {RingBufferConstructor} RingBuffer\n\t\t * @param {number} eventCapacity\n\t\t * @param {number} [maxBytesPerEvent=undefined]\n\t\t * @returns {SharedArrayBuffer}\n\t\t */\n\t\tstatic getStorageForEventCapacity(RingBuffer, eventCapacity, maxBytesPerEvent = undefined) {\n\t\t\tif (maxBytesPerEvent === undefined) maxBytesPerEvent = WamEventRingBuffer.DefaultExtraBytesPerEvent;\n\t\t\telse maxBytesPerEvent = Math.max(maxBytesPerEvent, WamEventRingBuffer.DefaultExtraBytesPerEvent);\n\t\t\tconst capacity = (Math.max(\n\t\t\t\tWamEventRingBuffer.WamAutomationEventBytes,\n\t\t\t\tWamEventRingBuffer.WamTransportEventBytes,\n\t\t\t\tWamEventRingBuffer.WamMidiEventBytes,\n\t\t\t\tWamEventRingBuffer.WamBinaryEventBytes,\n\t\t\t) + maxBytesPerEvent) * eventCapacity;\n\t\t\treturn RingBuffer.getStorageForCapacity(capacity, Uint8Array);\n\t\t}\n\n\t\t/**\n\t\t * Provides methods for encoding / decoding WamEvents to / from\n\t\t * a UInt8Array RingBuffer. Specify 'maxBytesPerEvent'\n\t\t * to support variable-size binary event types like sysex or osc.\n\t\t *\n\t\t * @param {RingBufferConstructor} RingBuffer\n\t\t * @param {SharedArrayBuffer} sab\n\t\t * @param {string[]} parameterIds\n\t\t * @param {number} [maxBytesPerEvent=undefined]\n\t\t */\n\t\tconstructor(RingBuffer, sab, parameterIds, maxBytesPerEvent = undefined) {\n\t\t\t/** @type {Record<string, number>} */\n\t\t\tthis._eventSizeBytes = {};\n\n\t\t\t/** @type {Record<string, number>} */\n\t\t\tthis._encodeEventType = {};\n\n\t\t\t/** @type {Record<number, string>} */\n\t\t\tthis._decodeEventType = {};\n\t\t\t/** @type {WamEventType[]} */\n\t\t\tconst wamEventTypes = ['wam-automation', 'wam-transport', 'wam-midi', 'wam-sysex', 'wam-mpe', 'wam-osc', 'wam-info'];\n\t\t\twamEventTypes.forEach((type, encodedType) => {\n\t\t\t\tlet byteSize = 0;\n\t\t\t\tswitch (type) {\n\t\t\t\tcase 'wam-automation': byteSize = WamEventRingBuffer.WamAutomationEventBytes; break;\n\t\t\t\tcase 'wam-transport': byteSize = WamEventRingBuffer.WamTransportEventBytes; break;\n\t\t\t\tcase 'wam-mpe':\n\t\t\t\tcase 'wam-midi': byteSize = WamEventRingBuffer.WamMidiEventBytes; break;\n\t\t\t\tcase 'wam-osc':\n\t\t\t\tcase 'wam-sysex':\n\t\t\t\tcase 'wam-info': byteSize = WamEventRingBuffer.WamBinaryEventBytes; break;\n\t\t\t\tdefault: break;\n\t\t\t\t}\n\t\t\t\tthis._eventSizeBytes[type] = byteSize;\n\t\t\t\tthis._encodeEventType[type] = encodedType;\n\t\t\t\tthis._decodeEventType[encodedType] = type;\n\t\t\t});\n\n\t\t\t/** @type {number} */\n\t\t\tthis._parameterCode = 0;\n\t\t\t/** @type {{[parameterId: string]: number}} */\n\t\t\tthis._parameterCodes = {};\n\t\t\t/** @type {{[parameterId: string]: number}} */\n\t\t\tthis._encodeParameterId = {};\n\t\t\t/** @type {{[parameterId: number]: string}} */\n\t\t\tthis._decodeParameterId = {};\n\t\t\tthis.setParameterIds(parameterIds);\n\n\t\t\t/** @type {SharedArrayBuffer} */\n\t\t\tthis._sab = sab;\n\n\t\t\tif (maxBytesPerEvent === undefined) maxBytesPerEvent = WamEventRingBuffer.DefaultExtraBytesPerEvent;\n\t\t\telse maxBytesPerEvent = Math.max(maxBytesPerEvent, WamEventRingBuffer.DefaultExtraBytesPerEvent);\n\n\t\t\t/** @type {number} */\n\t\t\tthis._eventBytesAvailable = Math.max(\n\t\t\t\tWamEventRingBuffer.WamAutomationEventBytes,\n\t\t\t\tWamEventRingBuffer.WamTransportEventBytes,\n\t\t\t\tWamEventRingBuffer.WamMidiEventBytes,\n\t\t\t\tWamEventRingBuffer.WamBinaryEventBytes,\n\t\t\t) + maxBytesPerEvent;\n\t\t\t/** @type {ArrayBuffer} */\n\t\t\tthis._eventBytes = new ArrayBuffer(this._eventBytesAvailable);\n\t\t\t/** @type {DataView} */\n\t\t\tthis._eventBytesView = new DataView(this._eventBytes);\n\n\t\t\t/** @type {RingBuffer} */\n\t\t\tthis._rb = new RingBuffer(this._sab, Uint8Array);\n\n\t\t\t/** @type {Uint8Array} */\n\t\t\tthis._eventSizeArray = new Uint8Array(this._eventBytes, 0, 4);\n\n\t\t\t/** @type {DataView} */\n\t\t\tthis._eventSizeView = new DataView(this._eventBytes, 0, 4);\n\t\t}\n\n\t\t/**\n\t\t * Write common WamEvent properties to internal buffer.\n\t\t *\n\t\t * @private\n\t\t * @param {number} byteSize total size of event in bytes\n\t\t * @param {string} type\n\t\t * @param {number} time\n\t\t * @returns {number} updated byte offset\n\t\t */\n\t\t_writeHeader(byteSize, type, time) {\n\t\t\tlet byteOffset = 0;\n\t\t\tthis._eventBytesView.setUint32(byteOffset, byteSize);\n\t\t\tbyteOffset += 4;\n\t\t\tthis._eventBytesView.setUint8(byteOffset, this._encodeEventType[type]);\n\t\t\tbyteOffset += 1;\n\t\t\tthis._eventBytesView.setFloat64(byteOffset, Number.isFinite(time) ? time : -1);\n\t\t\tbyteOffset += 8;\n\t\t\treturn byteOffset;\n\t\t}\n\n\t\t/**\n\t\t * Write WamEvent to internal buffer.\n\t\t *\n\t\t * @private\n\t\t * @param {WamEvent} event\n\t\t * @returns {Uint8Array}\n\t\t */\n\t\t_encode(event) {\n\t\t\tlet byteOffset = 0;\n\t\t\tconst { type, time } = event;\n\t\t\tswitch (event.type) {\n\t\t\tcase 'wam-automation': {\n\t\t\t\tif (!(event.data.id in this._encodeParameterId)) break;\n\t\t\t\tconst byteSize = this._eventSizeBytes[type];\n\t\t\t\tbyteOffset = this._writeHeader(byteSize, type, time);\n\n\t\t\t\t/**\n\t\t\t\t * @type {WamAutomationEvent}\n\t\t\t\t * @property {WamAutomationData} data\n\t\t\t\t */\n\t\t\t\tconst { data } = event;\n\t\t\t\tconst encodedParameterId = this._encodeParameterId[data.id];\n\t\t\t\tconst { value, normalized } = data;\n\n\t\t\t\tthis._eventBytesView.setUint16(byteOffset, encodedParameterId);\n\t\t\t\tbyteOffset += 2;\n\t\t\t\tthis._eventBytesView.setFloat64(byteOffset, value);\n\t\t\t\tbyteOffset += 8;\n\t\t\t\tthis._eventBytesView.setUint8(byteOffset, normalized ? 1 : 0);\n\t\t\t\tbyteOffset += 1;\n\t\t\t} break;\n\t\t\tcase 'wam-transport': {\n\t\t\t\tconst byteSize = this._eventSizeBytes[type];\n\t\t\t\tbyteOffset = this._writeHeader(byteSize, type, time);\n\n\t\t\t\t/**\n\t\t\t\t * @type {WamTransportEvent}\n\t\t\t\t * @property {WamTransportData} data\n\t\t\t\t */\n\t\t\t\tconst { data } = event;\n\t\t\t\tconst {\n\t\t\t\t\tcurrentBar, currentBarStarted, tempo, timeSigNumerator, timeSigDenominator, playing\n\t\t\t\t} = data;\n\n\t\t\t\tthis._eventBytesView.setUint32(byteOffset, currentBar);\n\t\t\t\tbyteOffset += 4;\n\t\t\t\tthis._eventBytesView.setFloat64(byteOffset, currentBarStarted);\n\t\t\t\tbyteOffset += 8;\n\t\t\t\tthis._eventBytesView.setFloat64(byteOffset, tempo);\n\t\t\t\tbyteOffset += 8;\n\t\t\t\tthis._eventBytesView.setUint8(byteOffset, timeSigNumerator);\n\t\t\t\tbyteOffset += 1;\n\t\t\t\tthis._eventBytesView.setUint8(byteOffset, timeSigDenominator);\n\t\t\t\tbyteOffset += 1;\n\t\t\t\tthis._eventBytesView.setUint8(byteOffset, playing ? 1 : 0);\n\t\t\t\tbyteOffset += 1;\n\t\t\t} break;\n\t\t\tcase 'wam-mpe':\n\t\t\tcase 'wam-midi': {\n\t\t\t\tconst byteSize = this._eventSizeBytes[type];\n\t\t\t\tbyteOffset = this._writeHeader(byteSize, type, time);\n\n\t\t\t\t/**\n\t\t\t\t * @type {WamMidiEvent | WamMpeEvent}\n\t\t\t\t * @property {WamMidiData} data\n\t\t\t\t */\n\t\t\t\tconst { data } = event;\n\t\t\t\tconst { bytes } = data;\n\t\t\t\tlet b = 0;\n\t\t\t\twhile (b < 3) {\n\t\t\t\t\tthis._eventBytesView.setUint8(byteOffset, bytes[b]);\n\t\t\t\t\tbyteOffset += 1;\n\t\t\t\t\tb++;\n\t\t\t\t}\n\t\t\t} break;\n\t\t\tcase 'wam-osc':\n\t\t\tcase 'wam-sysex':\n\t\t\tcase 'wam-info': {\n\t\t\t\t/** @type {Uint8Array | null} */\n\t\t\t\tlet bytes = null;\n\t\t\t\tif (event.type === 'wam-info') {\n\t\t\t\t\t/**\n\t\t\t\t\t * @type {WamInfoEvent}\n\t\t\t\t\t * @property {WamInfoData} data\n\t\t\t\t\t */\n\t\t\t\t\tconst { data } = event;\n\t\t\t\t\tbytes = (new TextEncoder()).encode(data.instanceId);\n\t\t\t\t} else {\n\t\t\t\t\t/**\n\t\t\t\t\t * @type {WamSysexEvent | WamOscEvent}\n\t\t\t\t\t * @property {WamBinaryData} data\n\t\t\t\t\t */\n\t\t\t\t\tconst { data } = event;\n\t\t\t\t\tbytes = data.bytes;\n\t\t\t\t}\n\t\t\t\tconst numBytes = bytes.length;\n\t\t\t\tconst byteSize = this._eventSizeBytes[type];\n\t\t\t\tbyteOffset = this._writeHeader(byteSize + numBytes, type, time);\n\n\t\t\t\tthis._eventBytesView.setUint32(byteOffset, numBytes);\n\t\t\t\tbyteOffset += 4;\n\n\t\t\t\tconst bytesRequired = byteOffset + numBytes;\n\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\tif (bytesRequired > this._eventBytesAvailable) console.error(`Event requires ${bytesRequired} bytes but only ${this._eventBytesAvailable} have been allocated!`);\n\n\t\t\t\tconst buffer = new Uint8Array(this._eventBytes, byteOffset, numBytes);\n\t\t\t\tbuffer.set(bytes);\n\t\t\t\tbyteOffset += numBytes;\n\t\t\t} break;\n\t\t\tdefault: break;\n\t\t\t}\n\t\t\treturn new Uint8Array(this._eventBytes, 0, byteOffset);\n\t\t}\n\n\t\t/**\n\t\t * Read WamEvent from internal buffer.\n\t\t *\n\t\t * @private\n\t\t * @returns {WamEvent | false} Decoded WamEvent\n\t\t */\n\t\t_decode() {\n\t\t\tlet byteOffset = 0;\n\t\t\tconst type = this._decodeEventType[this._eventBytesView.getUint8(byteOffset)];\n\t\t\tbyteOffset += 1;\n\t\t\tlet time = this._eventBytesView.getFloat64(byteOffset);\n\t\t\tif (time === -1) time = undefined;\n\t\t\tbyteOffset += 8;\n\n\t\t\tswitch (type) {\n\t\t\tcase 'wam-automation': {\n\t\t\t\tconst encodedParameterId = this._eventBytesView.getUint16(byteOffset);\n\t\t\t\tbyteOffset += 2;\n\t\t\t\tconst value = this._eventBytesView.getFloat64(byteOffset);\n\t\t\t\tbyteOffset += 8;\n\t\t\t\tconst normalized = !!this._eventBytesView.getUint8(byteOffset);\n\t\t\t\tbyteOffset += 1;\n\n\t\t\t\tif (!(encodedParameterId in this._decodeParameterId)) break;\n\t\t\t\tconst id = this._decodeParameterId[encodedParameterId];\n\t\t\t\t/** @type {WamAutomationEvent} */\n\t\t\t\tconst event = {\n\t\t\t\t\ttype,\n\t\t\t\t\ttime,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tid, value, normalized,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\treturn event;\n\t\t\t}\n\t\t\tcase 'wam-transport': {\n\t\t\t\tconst currentBar = this._eventBytesView.getUint32(byteOffset);\n\t\t\t\tbyteOffset += 4;\n\t\t\t\tconst currentBarStarted = this._eventBytesView.getFloat64(byteOffset);\n\t\t\t\tbyteOffset += 8;\n\t\t\t\tconst tempo = this._eventBytesView.getFloat64(byteOffset);\n\t\t\t\tbyteOffset += 8;\n\t\t\t\tconst timeSigNumerator = this._eventBytesView.getUint8(byteOffset);\n\t\t\t\tbyteOffset += 1;\n\t\t\t\tconst timeSigDenominator = this._eventBytesView.getUint8(byteOffset);\n\t\t\t\tbyteOffset += 1;\n\t\t\t\tconst playing = (this._eventBytesView.getUint8(byteOffset) == 1);\n\t\t\t\tbyteOffset += 1;\n\n\t\t\t\t/** @type {WamTransportEvent} */\n\t\t\t\tconst event = {\n\t\t\t\t\ttype,\n\t\t\t\t\ttime,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tcurrentBar, currentBarStarted, tempo, timeSigNumerator, timeSigDenominator, playing\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\treturn event;\n\t\t\t}\n\t\t\tcase 'wam-mpe':\n\t\t\tcase 'wam-midi': {\n\t\t\t\t/** @type {[number, number, number]} */\n\t\t\t\tconst bytes = [0, 0, 0];\n\t\t\t\tlet b = 0;\n\t\t\t\twhile (b < 3) {\n\t\t\t\t\tbytes[b] = this._eventBytesView.getUint8(byteOffset);\n\t\t\t\t\tbyteOffset += 1;\n\t\t\t\t\tb++;\n\t\t\t\t}\n\n\t\t\t\t/** @type {WamMidiEvent | WamMpeEvent} */\n\t\t\t\tconst event = {\n\t\t\t\t\ttype,\n\t\t\t\t\ttime,\n\t\t\t\t\tdata: { bytes },\n\t\t\t\t};\n\t\t\t\treturn event;\n\t\t\t}\n\t\t\tcase 'wam-osc':\n\t\t\tcase 'wam-sysex':\n\t\t\tcase 'wam-info': {\n\t\t\t\tconst numBytes = this._eventBytesView.getUint32(byteOffset);\n\t\t\t\tbyteOffset += 4;\n\t\t\t\tconst bytes = new Uint8Array(numBytes);\n\t\t\t\tbytes.set(new Uint8Array(this._eventBytes, byteOffset, numBytes));\n\t\t\t\tbyteOffset += numBytes;\n\n\t\t\t\tif (type === 'wam-info') {\n\t\t\t\t\tconst instanceId = (new TextDecoder()).decode(bytes);\n\t\t\t\t\tconst data = { instanceId };\n\t\t\t\t\treturn { type, time, data };\n\t\t\t\t} else {\n\t\t\t\t\tconst data = { bytes };\n\t\t\t\t\treturn { type, time, data };\n\t\t\t\t}\n\t\t\t}\n\t\t\tdefault: break;\n\t\t\t}\n\t\t\t// eslint-disable-next-line no-console\n\t\t\t// console.warn('Failed to decode event!');\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t * Write WamEvents to the ring buffer, returning\n\t\t * the number of events successfully written.\n\t\t *\n\t\t * @param {WamEvent[]} events\n\t\t * @returns {number}\n\t\t */\n\t\twrite(...events) {\n\t\t\tconst numEvents = events.length;\n\t\t\tlet bytesAvailable = this._rb.availableWrite;\n\t\t\tlet numSkipped = 0;\n\t\t\tlet i = 0;\n\t\t\twhile (i < numEvents) {\n\t\t\t\tconst event = events[i];\n\t\t\t\tconst bytes = this._encode(event);\n\t\t\t\tconst eventSizeBytes = bytes.byteLength;\n\n\t\t\t\tlet bytesWritten = 0;\n\t\t\t\tif (bytesAvailable >= eventSizeBytes) {\n\t\t\t\t\tif (eventSizeBytes === 0) numSkipped++;\n\t\t\t\t\telse bytesWritten = this._rb.push(bytes);\n\t\t\t\t} else break;\n\t\t\t\tbytesAvailable -= bytesWritten;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\treturn i - numSkipped;\n\t\t}\n\n\t\t/**\n\t\t * Read WamEvents from the ring buffer, returning\n\t\t * the list of events successfully read.\n\t\t *\n\t\t * @returns {WamEvent[]}\n\t\t */\n\t\tread() {\n\t\t\tif (this._rb.empty) return [];\n\t\t\tconst events = [];\n\t\t\tlet bytesAvailable = this._rb.availableRead;\n\t\t\tlet bytesRead = 0;\n\t\t\twhile (bytesAvailable > 0) {\n\t\t\t\tbytesRead = this._rb.pop(this._eventSizeArray);\n\t\t\t\tbytesAvailable -= bytesRead;\n\t\t\t\tconst eventSizeBytes = this._eventSizeView.getUint32(0);\n\t\t\t\tconst eventBytes = new Uint8Array(this._eventBytes, 0, eventSizeBytes - 4);\n\t\t\t\tbytesRead = this._rb.pop(eventBytes);\n\t\t\t\tbytesAvailable -= bytesRead;\n\t\t\t\tconst decodedEvent = this._decode();\n\t\t\t\tif (decodedEvent) events.push(decodedEvent);\n\t\t\t}\n\t\t\treturn events;\n\t\t}\n\n\t\t/**\n\t\t * In case parameter set changes, update the internal mappings.\n\t\t * May result in some invalid automation events, which will be\n\t \t * ignored. Note that this must be called on all corresponding\n\t\t * WamEventRingBuffers on both threads.\n\t\t * @param {string[]} parameterIds\n\t\t */\n\t\tsetParameterIds(parameterIds) {\n\t\t\tthis._encodeParameterId = {};\n\t\t\tthis._decodeParameterId = {};\n\t\t\tparameterIds.forEach((parameterId) => {\n\t\t\t\tlet parameterCode = -1\n\t\t\t\tif (parameterId in this._parameterCodes) parameterCode = this._parameterCodes[parameterId];\n\t\t\t\telse {\n\t\t\t\t\tparameterCode = this._generateParameterCode();\n\t\t\t\t\tthis._parameterCodes[parameterId] = parameterCode;\n\t\t\t\t}\n\t\t\t\tthis._encodeParameterId[parameterId] = parameterCode;\n\t\t\t\tthis._decodeParameterId[parameterCode] = parameterId;\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Generates a numeric parameter code in a range suitable for\n\t\t * encoding as uint16.\n\t\t *\n\t\t * @returns {number}\n\t\t */\n\t\t_generateParameterCode() {\n\t\t\tif (this._parameterCode > 65535) throw Error('Too many parameters have been registered!');\n\t\t\treturn this._parameterCode++;\n\t\t}\n\n\t}\n\n\tif (audioWorkletGlobalScope.AudioWorkletProcessor) {\n\t\t/** @type {WamSDKBaseModuleScope} */\n\t\tconst ModuleScope = audioWorkletGlobalScope.webAudioModules.getModuleScope(moduleId);\n\n\t\tif (!ModuleScope.WamEventRingBuffer) ModuleScope.WamEventRingBuffer = WamEventRingBuffer;\n\t}\n\n\treturn WamEventRingBuffer;\n};\n\nexport default getWamEventRingBuffer;\n", "/**\r\n * Take a function, stringify it and inject to an AudioWorklet with parameters.\r\n *\r\n * @param {AudioWorklet} audioWorklet\r\n * @param {(...args: any[]) => any} processorFunction\r\n * @param {any[]} [injection]\r\n * @returns {Promise<void>}\r\n */\r\nconst addFunctionModule = (audioWorklet, processorFunction, ...injection) => {\r\n    const text = `(${processorFunction.toString()})(${injection.map((s) => JSON.stringify(s)).join(', ')});`\r\n    const url = URL.createObjectURL(new Blob([text], { type: 'text/javascript' }));\r\n    return audioWorklet.addModule(url);\r\n}\r\n\r\nexport default addFunctionModule;\r\n", "/** @typedef {import('@webaudiomodules/api').WamParameter} IWamParameter */\n/** @typedef {typeof import('@webaudiomodules/api').WamParameter} WamParameterContructor */\n/** @typedef {import('@webaudiomodules/api').WamParameterInfo} WamParameterInfo */\n/** @typedef {import('@webaudiomodules/api').AudioWorkletGlobalScope} AudioWorkletGlobalScope */\n/** @typedef {import('./types').WamSDKBaseModuleScope} WamSDKBaseModuleScope */\n\n/**\n * @param {string} [moduleId]\n * @returns {WamParameterContructor}\n */\nconst getWamParameter = (moduleId) => {\n\t/** @type {AudioWorkletGlobalScope} */\n\t// @ts-ignore\n\tconst audioWorkletGlobalScope = globalThis;\n\n\t/** @implements {IWamParameter} */\n\tclass WamParameter {\n\t\t/** @param {WamParameterInfo} info */\n\t\tconstructor(info) {\n\t\t\t/** @readonly @type {WamParameterInfo} */\n\t\t\tthis.info = info;\n\t\t\t/** @private @type {number} */\n\t\t\tthis._value = info.defaultValue;\n\t\t}\n\t\n\t\t/**\n\t\t * Set current (denormalized) value\n\t\t * @param {number} value\n\t\t*/\n\t\tset value(value) {\n\t\t\tthis._value = value;\n\t\t}\n\t\n\t\t/**\n\t\t * Get current (denormalized) value\n\t\t * @returns {number}\n\t\t */\n\t\tget value() {\n\t\t\treturn this._value;\n\t\t}\n\t\n\t\t/**\n\t\t * Set current value in normalized range\n\t\t * @param {number} valueNorm\n\t\t */\n\t\tset normalizedValue(valueNorm) {\n\t\t\tthis.value = this.info.denormalize(valueNorm);\n\t\t}\n\t\n\t\t/**\n\t\t * Get current value in normalized range\n\t\t * @returns {number}\n\t\t */\n\t\tget normalizedValue() {\n\t\t\treturn this.info.normalize(this.value);\n\t\t}\n\t}\n\n\tif (audioWorkletGlobalScope.AudioWorkletProcessor) {\n\t\t/** @type {WamSDKBaseModuleScope} */\n\t\tconst ModuleScope = audioWorkletGlobalScope.webAudioModules.getModuleScope(moduleId);\n\t\n\t\tif (!ModuleScope.WamParameter) ModuleScope.WamParameter = WamParameter;\n\t}\n\n\treturn WamParameter;\n};\n\nexport default getWamParameter;\n", "/** @typedef {import('@webaudiomodules/api').WamParameterInfo} IWamParameterInfo */\n/** @typedef {typeof import('@webaudiomodules/api').WamParameterInfo} WamParameterInfoConstructor */\n/** @typedef {import('@webaudiomodules/api').WamParameterType} WamParameterType */\n/** @typedef {import('@webaudiomodules/api').WamParameterConfiguration} WamParameterConfiguration */\n/** @typedef {import('@webaudiomodules/api').AudioWorkletGlobalScope} AudioWorkletGlobalScope */\n/** @typedef {import('./types').WamSDKBaseModuleScope} WamSDKBaseModuleScope */\n\n/**\n * @param {string} [moduleId]\n * @returns {WamParameterInfoConstructor}\n */\nconst getWamParameterInfo = (moduleId) => {\n\t/** @type {AudioWorkletGlobalScope} */\n\t// @ts-ignore\n\tconst audioWorkletGlobalScope = globalThis;\n\n\t/**\n\t * @param {number} x\n\t * @param {number} e\n\t */\n\tconst normExp = (x, e) => (e === 0 ? x : x ** (1.5 ** -e));\n\t\n\t/**\n\t * @param {number} x\n\t * @param {number} e\n\t */\n\tconst denormExp = (x, e) => (e === 0 ? x : x ** (1.5 ** e));\n\t\n\t/**\n\t * @param {number} x\n\t * @param {number} min\n\t * @param {number} max\n\t */\n\tconst normalize = (x, min, max, e = 0) => (\n\t\tmin === 0 && max === 1\n\t\t\t? normExp(x, e)\n\t\t\t: normExp((x - min) / (max - min) || 0, e));\n\t\n\t/**\n\t * @param {any} x\n\t * @param {number} min\n\t * @param {number} max\n\t */\n\tconst denormalize = (x, min, max, e = 0) => (\n\t\tmin === 0 && max === 1\n\t\t\t? denormExp(x, e)\n\t\t\t: denormExp(x, e) * (max - min) + min\n\t);\n\t\n\t/**\n\t * @param {number} x\n\t * @param {number} min\n\t * @param {number} max\n\t */\n\tconst inRange = (x, min, max) => (x >= min && x <= max);\n\t\n\t/**\n\t * @implements {IWamParameterInfo}\n\t */\n\tclass WamParameterInfo {\n\t\t/**\n\t\t * @param {string} id\n\t\t * @param {WamParameterConfiguration} [config]\n\t\t */\n\t\tconstructor(id, config = {}) {\n\t\t\tlet {\n\t\t\t\ttype, label, defaultValue, minValue, maxValue, discreteStep, exponent, choices, units,\n\t\t\t} = config;\n\t\t\tif (type === undefined) type = 'float';\n\t\t\tif (label === undefined) label = '';\n\t\t\tif (defaultValue === undefined) defaultValue = 0;\n\t\t\tif (choices === undefined) choices = [];\n\t\t\tif (type === 'boolean' || type === 'choice') {\n\t\t\t\tdiscreteStep = 1;\n\t\t\t\tminValue = 0;\n\t\t\t\tif (choices.length) maxValue = choices.length - 1;\n\t\t\t\telse maxValue = 1;\n\t\t\t} else {\n\t\t\t\tif (minValue === undefined) minValue = 0;\n\t\t\t\tif (maxValue === undefined) maxValue = 1;\n\t\t\t\tif (discreteStep === undefined) discreteStep = 0;\n\t\t\t\tif (exponent === undefined) exponent = 0;\n\t\t\t\tif (units === undefined) units = '';\n\t\t\t}\n\t\n\t\t\tconst errBase = `Param config error | ${id}: `;\n\t\t\tif (minValue >= maxValue) throw Error(errBase.concat('minValue must be less than maxValue'));\n\t\t\tif (!inRange(defaultValue, minValue, maxValue)) throw Error(errBase.concat('defaultValue out of range'));\n\t\t\tif (discreteStep % 1 || discreteStep < 0) {\n\t\t\t\tthrow Error(errBase.concat('discreteStep must be a non-negative integer'));\n\t\t\t} else if (discreteStep > 0 && (minValue % 1 || maxValue % 1 || defaultValue % 1)) {\n\t\t\t\tthrow Error(errBase.concat('non-zero discreteStep requires integer minValue, maxValue, and defaultValue'));\n\t\t\t}\n\t\t\tif (type === 'choice' && !choices.length) {\n\t\t\t\tthrow Error(errBase.concat('choice type parameter requires list of strings in choices'));\n\t\t\t}\n\t\n\t\t\t/**\n\t\t\t * The parameter's unique identifier.\n\t\t\t * @readonly @type {string}\n\t\t\t */\n\t\t\tthis.id = id;\n\t\n\t\t\t/**\n\t\t\t * The parameter's human-readable name.\n\t\t\t * @readonly @type {string}\n\t\t\t */\n\t\t\tthis.label = label;\n\t\n\t\t\t/**\n\t\t\t * The parameter's data type.\n\t\t\t * @readonly @type {WamParameterType}\n\t\t\t */\n\t\t\tthis.type = type;\n\t\n\t\t\t/**\n\t\t\t * The parameter's default value. Must be\n\t\t\t * within range `[minValue, maxValue]`.\n\t\t\t * @readonly @type {number}\n\t\t\t */\n\t\t\tthis.defaultValue = defaultValue;\n\t\n\t\t\t/**\n\t\t\t * The minimum valid value of the parameter's range.\n\t\t\t * @readonly @type {number}\n\t\t\t */\n\t\t\tthis.minValue = minValue;\n\t\n\t\t\t/**\n\t\t\t * The maximum valid value of the parameter's range.\n\t\t\t * @readonly @type {number}\n\t\t\t */\n\t\t\tthis.maxValue = maxValue;\n\t\n\t\t\t/**\n\t\t\t * The distance between adjacent valid integer\n\t\t\t * values, if applicable.\n\t\t\t * @readonly @type {number}\n\t\t\t */\n\t\t\tthis.discreteStep = discreteStep;\n\t\n\t\t\t/**\n\t\t\t * The nonlinear (exponential) skew of the parameter's\n\t\t\t * range, if applicable.\n\t\t\t *  @readonly @type {number}\n\t\t\t */\n\t\t\tthis.exponent = exponent;\n\t\n\t\t\t/**\n\t\t\t * A list of human-readable choices corresponding to each\n\t\t\t * valid integer value in the parameter's range, if applicable.\n\t\t\t * @readonly @type {string[]}\n\t\t\t */\n\t\t\tthis.choices = choices;\n\t\n\t\t\t/**\n\t\t\t * A human-readable string representing the units of the\n\t\t\t * parameter's range, if applicable.\n\t\t\t * @readonly @type {string}\n\t\t\t */\n\t\t\tthis.units = units;\n\t\t}\n\t\n\t\t/**\n\t\t * Convert a value from the parameter's denormalized range\n\t\t * `[minValue, maxValue]` to normalized range `[0, 1]`.\n\t\t * @param {number} value\n\t\t */\n\t\tnormalize(value) {\n\t\t\treturn normalize(value, this.minValue, this.maxValue, this.exponent);\n\t\t}\n\t\n\t\t/**\n\t\t * Convert a value from normalized range `[0, 1]` to the\n\t\t * parameter's denormalized range `[minValue, maxValue]`.\n\t\t * @param {number} valueNorm\n\t\t */\n\t\tdenormalize(valueNorm) {\n\t\t\treturn denormalize(valueNorm, this.minValue, this.maxValue, this.exponent);\n\t\t}\n\t\n\t\t/**\n\t\t * Get a human-readable string representing the given value,\n\t\t * including units if applicable.\n\t\t * @param {number} value\n\t\t */\n\t\tvalueString(value) {\n\t\t\tif (this.choices) return this.choices[value];\n\t\t\tif (this.units !== '') return `${value} ${this.units}`;\n\t\t\treturn `${value}`;\n\t\t}\n\t}\n\n\tif (audioWorkletGlobalScope.AudioWorkletProcessor) {\n\t\t/** @type {WamSDKBaseModuleScope} */\n\t\tconst ModuleScope = audioWorkletGlobalScope.webAudioModules.getModuleScope(moduleId);\n\t\n\t\tif (!ModuleScope.WamParameterInfo) ModuleScope.WamParameterInfo = WamParameterInfo;\n\t}\n\n\treturn WamParameterInfo;\n};\n\nexport default getWamParameterInfo;\n", "/** @typedef {import('@webaudiomodules/api').WamParameterInfo} WamParameterInfo */\n/** @typedef {import('@webaudiomodules/api').AudioWorkletGlobalScope} AudioWorkletGlobalScope */\n/** @typedef {import('./types').WamParameterInterpolator} IWamParameterInterpolator */\n/** @typedef {typeof import('./types').WamParameterInterpolator} WamParameterInterpolatorConstructor */\n/** @typedef {import('./types').WamSDKBaseModuleScope} WamSDKBaseModuleScope */\n\n/**\n * @param {string} [moduleId]\n * @returns {WamParameterInterpolatorConstructor}\n */\nconst getWamParameterInterpolator = (moduleId) => {\n\t/** @type {AudioWorkletGlobalScope} */\n\t// @ts-ignore\n\tconst audioWorkletGlobalScope = globalThis;\n\n\tconst samplesPerQuantum = 128;\n\tconst nullTableKey = '0_0';\n\t\n\t/**\n\t * Provides per-sample value updates for WamParameters\n\t * with interpolation when applicable. Only one instance\n\t * should be created per WamParameter.\n\t * TODO write equivalent C++ code for WASM implementations?\n\t * @implements {IWamParameterInterpolator}\n\t */\n\tclass WamParameterInterpolator {\n\t\t/**\n\t\t * Lookup tables to avoid recomputing interpolation curves. Keyed\n\t\t * by `'<samplesPerInterpolation>_<skew>'`. Not used for\n\t\t * discrete parameters.\n\t\t * @static @type {Record<string, Float32Array>}\n\t\t */\n\t\tstatic _tables;\n\t\n\t\t/**\n\t\t * List of parameter ids currently using the lookup table associated\n\t\t * with the key. Keyed by `'<samplesPerInterpolation>_<skew>'`.\n\t\t * For purging unused lookup tables. Not used for discrete parameters.\n\t\t * @static @type {Record<string, string[]>}\n\t\t */\n\t\tstatic _tableReferences;\n\t\n\t\t/**\n\t\t * @param {WamParameterInfo} info\n\t\t * @param {number} samplesPerInterpolation\n\t\t * @param {number=} skew\n\t\t */\n\t\tconstructor(info, samplesPerInterpolation, skew = 0) {\n\t\t\tif (!WamParameterInterpolator._tables) {\n\t\t\t\tWamParameterInterpolator._tables = { nullTableKey: new Float32Array(0) };\n\t\t\t\tWamParameterInterpolator._tableReferences = { nullTableKey: [] };\n\t\t\t}\n\t\n\t\t\t/**\n\t\t\t * Info object for corresponding WamParameter.\n\t\t\t * @readonly @type {WamParameterInfo}\n\t\t\t */\n\t\t\tthis.info = info;\n\t\n\t\t\t/**\n\t\t\t * Buffer storing per-sample values.\n\t\t\t * @readonly @type {Float32Array}\n\t\t\t */\n\t\t\tthis.values = new Float32Array(samplesPerQuantum);\n\t\n\t\t\t/**\n\t\t\t * Composed by concatenating `'<samplesPerInterpolation>_<skew>'`.\n\t\t\t * @private @type {string}\n\t\t\t */\n\t\t\tthis._tableKey = nullTableKey;\n\t\n\t\t\t/**\n\t\t\t * The (static) lookup table used to avoid recomputing ramps.\n\t\t\t * @private @type {Float32Array}\n\t\t\t */\n\t\t\tthis._table = WamParameterInterpolator._tables[this._tableKey];\n\t\n\t\t\t/**\n\t\t\t * Determines if interpolation will be linear / nonlinear.\n\t\t\t * Note that this is distinct from the corresponding\n\t\t\t * parameter's `exponent` value.\n\t\t\t * @private @type {number}\n\t\t\t */\n\t\t\tthis._skew = 2; // intentionally initialized out of range, see setSkew\n\t\n\t\t\tconst { discreteStep } = info;\n\t\n\t\t\t/**\n\t\t\t * Whether or not to perform interpolation\n\t\t\t * (false for integer parameters, true otherwise).\n\t\t\t * @readonly @private @type {boolean}\n\t\t\t */\n\t\t\tthis._discrete = !!discreteStep;\n\t\n\t\t\t/**\n\t\t\t * The interpolation period in samples.\n\t\t\t * @readonly @private @type {number}\n\t\t\t */\n\t\t\tthis._N = this._discrete ? 0 : samplesPerInterpolation;\n\t\n\t\t\t/**\n\t\t\t * The current interpolation index.\n\t\t\t * @private @type {number}\n\t\t\t */\n\t\t\tthis._n = 0;\n\t\n\t\t\t/**\n\t\t\t * The parameter value when interpolation starts.\n\t\t\t * @private @type {number}\n\t\t\t*/\n\t\t\tthis._startValue = info.defaultValue;\n\t\n\t\t\t/**\n\t\t\t * The parameter value when interpolation ends.\n\t\t\t * @private @type {number}\n\t\t\t */\n\t\t\tthis._endValue = info.defaultValue;\n\t\n\t\t\t/**\n\t\t\t * The most recently computed parameter value.\n\t\t\t * @private @type {number}\n\t\t\t */\n\t\t\tthis._currentValue = info.defaultValue;\n\t\n\t\t\t/**\n\t\t\t * The difference between `startValue` and `endValue`.\n\t\t\t * @private @type {number}\n\t\t\t */\n\t\t\tthis._deltaValue = 0;\n\t\n\t\t\t/**\n\t\t\t * Allows consistent output with respect to skew setting\n\t\t\t * whether increasing or decreasing during interpolation.\n\t\t\t * @private @type {boolean}\n\t\t\t */\n\t\t\tthis._inverted = false;\n\t\n\t\t\t/**\n\t\t\t * Whether the most recently requested interpolation has completed.\n\t\t\t * @private @type {boolean}\n\t\t\t */\n\t\t\tthis._changed = true;\n\t\n\t\t\t/**\n\t\t\t * How many samples have been uniformly filled following\n\t\t\t * completion of most recently requested interpolation.\n\t\t\t * @private @type {number}\n\t\t\t */\n\t\t\tthis._filled = 0;\n\t\n\t\t\tif (!this._discrete) this.setSkew(skew);\n\t\t\telse this._skew = 0;\n\t\t\tthis.setStartValue(this._startValue);\n\t\t}\n\t\n\t\t/**\n\t\t * Utility for managing lifecycles of lookup tables.\n\t\t * @private\n\t\t * @param {string} oldKey\n\t\t */\n\t\t_removeTableReference(oldKey) {\n\t\t\tif (oldKey === nullTableKey) return;\n\t\t\tconst { id } = this.info;\n\t\t\t/** @type {string[] | undefined} */\n\t\t\tconst references = WamParameterInterpolator._tableReferences[oldKey];\n\t\t\tif (references) {\n\t\t\t\tconst index = references.indexOf(id);\n\t\t\t\tif (index !== -1) references.splice(index, 1);\n\t\t\t\t// clean up?\n\t\t\t\tif (references.length === 0) {\n\t\t\t\t\tdelete WamParameterInterpolator._tables[oldKey];\n\t\t\t\t\tdelete WamParameterInterpolator._tableReferences[oldKey];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t/**\n\t\t * Update interpolation curve based on skew factor in range `[-1, 1]`.\n\t\t * Setting to `0` results in linear interpolation. Positive values\n\t\t * result in convex exponential curves while negative vales result\n\t\t * in concave exponential curves.\n\t\t * @param {number} skew\n\t\t */\n\t\tsetSkew(skew) {\n\t\t\tif (this._skew === skew || this._discrete) return;\n\t\t\tif (skew < -1 || skew > 1) throw Error('skew must be in range [-1.0, 1.0]');\n\t\n\t\t\tconst newKey = [this._N, skew].join('_');\n\t\t\tconst oldKey = this._tableKey;\n\t\t\tconst { id } = this.info;\n\t\t\t// just in case...\n\t\t\tif (newKey === oldKey) return;\n\t\n\t\t\tif (WamParameterInterpolator._tables[newKey]) { // lookup table already exists\n\t\t\t\t// add new reference\n\t\t\t\t/** @type {string[] | undefined} */\n\t\t\t\tconst references = WamParameterInterpolator._tableReferences[newKey];\n\t\t\t\tif (references) references.push(id);\n\t\t\t\telse WamParameterInterpolator._tableReferences[newKey] = [id];\n\t\t\t} else { // compute new lookup table\n\t\t\t\tlet e = Math.abs(skew);\n\t\t\t\t/* eslint-disable-next-line */\n\t\t\t\te = Math.pow(3.0 - e, e * (e + 2.0));\n\t\t\t\tconst linear = e === 1.0;\n\t\t\t\tconst N = this._N;\n\t\t\t\tconst table = new Float32Array(N + 1);\n\t\t\t\tif (linear) for (let n = 0; n <= N; ++n) table[n] = (n / N);\n\t\t\t\telse for (let n = 0; n <= N; ++n) table[n] = (n / N) ** e;\n\t\n\t\t\t\tWamParameterInterpolator._tables[newKey] = table;\n\t\t\t\tWamParameterInterpolator._tableReferences[newKey] = [id];\n\t\t\t}\n\t\t\t// remove old reference\n\t\t\tthis._removeTableReference(oldKey);\n\t\t\tthis._skew = skew;\n\t\t\tthis._tableKey = newKey;\n\t\t\tthis._table = WamParameterInterpolator._tables[this._tableKey];\n\t\t}\n\t\n\t\t/**\n\t\t * Reset the interpolator to specified value, setting all per-sample\n\t\t * values immediately if `fill` is `true`. Assumes `value` is within\n\t\t * parameter's valid range `[minValue, maxValue]`;\n\t\t * @param {number} value\n\t\t * @param {boolean} fill\n\t\t */\n\t\tsetStartValue(value, fill = true) {\n\t\t\tthis._n = this._N;\n\t\t\tthis._startValue = value;\n\t\t\tthis._endValue = value;\n\t\t\tthis._currentValue = value;\n\t\t\tthis._deltaValue = 0;\n\t\t\tthis._inverted = false;\n\t\t\tif (fill) {\n\t\t\t\tthis.values.fill(value);\n\t\t\t\tthis._changed = true;\n\t\t\t\tthis._filled = this.values.length;\n\t\t\t} else {\n\t\t\t\tthis._changed = false;\n\t\t\t\tthis._filled = 0;\n\t\t\t}\n\t\t}\n\t\n\t\t/**\n\t\t * Prepare to compute per-sample values interpolating to `value` on\n\t\t * next `process` call. Assumes `value` is within parameter's valid\n\t\t * range `[minValue, maxValue]`;\n\t\t * @param {number} value\n\t\t */\n\t\tsetEndValue(value) {\n\t\t\tif (value === this._endValue) return;\n\t\t\tthis._n = 0;\n\t\t\tthis._startValue = this._currentValue;\n\t\t\tthis._endValue = value;\n\t\t\tthis._deltaValue = this._endValue - this._startValue;\n\t\t\tthis._inverted = (this._deltaValue > 0 && this._skew >= 0)\n\t\t\t|| (this._deltaValue <= 0 && this._skew < 0);\n\t\t\tthis._changed = false;\n\t\t\tthis._filled = 0;\n\t\t}\n\t\n\t\t/**\n\t\t * Compute per-sample value updates in the specified range `[startSample, endSample)`,\n\t\t * interpolating if applicable. Results are stored in `values`. Assumes this will be\n\t\t * called once per parameter per processing slice in `WamProcessor.process`.\n\t\t * @param {number} startSample\n\t\t * @param {number} endSample\n\t\t */\n\t\tprocess(startSample, endSample) {\n\t\t\tif (this.done) return;\n\t\t\tconst length = endSample - startSample;\n\t\t\tlet fill = 0;\n\t\t\tconst change = this._N - this._n;\n\t\t\tif (this._discrete || !change) fill = length;\n\t\t\telse {\n\t\t\t\tif (change < length) {\n\t\t\t\t\tfill = Math.min(length - change, samplesPerQuantum);\n\t\t\t\t\tendSample -= fill;\n\t\t\t\t}\n\t\t\t\tif (endSample > startSample) { // interpolate\n\t\t\t\t\tif (this._inverted) {\n\t\t\t\t\t\tfor (let i = startSample; i < endSample; ++i) {\n\t\t\t\t\t\t\tconst tableValue = 1.0 - this._table[this._N - ++this._n];\n\t\t\t\t\t\t\tthis.values[i] = this._startValue + tableValue * this._deltaValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (let i = startSample; i < endSample; ++i) {\n\t\t\t\t\t\t\tconst tableValue = this._table[++this._n];\n\t\t\t\t\t\t\tthis.values[i] = this._startValue + tableValue * this._deltaValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (fill > 0) {\n\t\t\t\t\tstartSample = endSample;\n\t\t\t\t\tendSample += fill;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (fill > 0) {\n\t\t\t\t// fill any remaining slots\n\t\t\t\tthis.values.fill(this._endValue, startSample, endSample);\n\t\t\t\tthis._filled += fill;\n\t\t\t}\n\t\t\tthis._currentValue = this.values[endSample - 1];\n\t\t\tif (this._n === this._N) {\n\t\t\t\tif (!this._changed) this._changed = true;\n\t\t\t\telse if (this._filled >= this.values.length) {\n\t\t\t\t\tthis.setStartValue(this._endValue, false);\n\t\t\t\t\tthis._changed = true;\n\t\t\t\t\tthis._filled = this.values.length;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t/**\n\t\t * Whether or not further processing is required before\n\t\t * accessing per-sample values.\n\t\t * @returns {boolean}\n\t\t */\n\t\tget done() {\n\t\t\treturn this._changed && this._filled === this.values.length;\n\t\t}\n\t\n\t\t/**\n\t\t * Whether or not interpolation is complete and internal state\n\t\t * is equal to `value`.\n\t\t * @param {number} value\n\t\t * @returns {boolean}\n\t\t */\n\t\tis(value) {\n\t\t\treturn this._endValue === value && this.done;\n\t\t}\n\t\n\t\t/**\n\t\t * Call this when no longer using the instance in order\n\t\t * to allow deletion of unused static lookup tables.\n\t\t */\n\t\tdestroy() {\n\t\t\t// clean out reference associated with this instance\n\t\t\tthis._removeTableReference(this._tableKey);\n\t\t}\n\t}\n\n\tif (audioWorkletGlobalScope.AudioWorkletProcessor) {\n\t\t/** @type {WamSDKBaseModuleScope} */\n\t\tconst ModuleScope = audioWorkletGlobalScope.webAudioModules.getModuleScope(moduleId);\n\t\n\t\tif (!ModuleScope.WamParameterInterpolator) ModuleScope.WamParameterInterpolator = WamParameterInterpolator;\n\t}\n\n\treturn WamParameterInterpolator;\n};\n\nexport default getWamParameterInterpolator;\n", "/** @typedef {import('@webaudiomodules/api').WamProcessor} IWamProcessor */\n/** @typedef {typeof import('@webaudiomodules/api').WamProcessor} WamProcessorConstructor */\n/** @typedef {import('@webaudiomodules/api').WamParameter} WamParameter */\n/** @typedef {import('@webaudiomodules/api').WamParameterInfoMap} WamParameterInfoMap */\n/** @typedef {import('@webaudiomodules/api').WamParameterDataMap} WamParameterDataMap */\n/** @typedef {import('@webaudiomodules/api').WamParameterData} WamParameterData */\n/** @typedef {import('@webaudiomodules/api').WamParameterMap} WamParameterMap */\n/** @typedef {import('@webaudiomodules/api').WamEvent} WamEvent */\n/** @typedef {import('@webaudiomodules/api').WamTransportData} WamTransportData */\n/** @typedef {import('@webaudiomodules/api').WamMidiData} WamMidiData */\n/** @typedef {import('@webaudiomodules/api').WamBinaryData} WamBinaryData */\n/** @typedef {import('@webaudiomodules/api').AudioWorkletGlobalScope} AudioWorkletGlobalScope */\n/** @typedef {import('./types').PendingWamEvent} PendingWamEvent */\n/** @typedef {import('./types').ProcessingSlice} ProcessingSlice */\n/** @typedef {import('./types').WamParameterInterpolatorMap} WamParameterInterpolatorMap */\n/** @typedef {import('./types').WamEventRingBuffer} WamEventRingBuffer */\n/** @typedef {import('./types').WamSDKBaseModuleScope} WamSDKBaseModuleScope */\n\n/**\n * @param {string} [moduleId]\n * @returns {WamProcessorConstructor}\n */\nconst getWamProcessor = (moduleId) => {\n\t/** @type {AudioWorkletGlobalScope} */\n\t// @ts-ignore\n\tconst audioWorkletGlobalScope = globalThis;\n\tconst {\n\t\tAudioWorkletProcessor,\n\t\twebAudioModules,\n\t} = audioWorkletGlobalScope;\n\t\n\t/** @type {WamSDKBaseModuleScope} */\n\tconst ModuleScope = audioWorkletGlobalScope.webAudioModules.getModuleScope(moduleId);\n\tconst {\n\t\tRingBuffer,\n\t\tWamEventRingBuffer,\n\t\tWamParameter,\n\t\tWamParameterInterpolator\n\t} = ModuleScope;\n\t\t\n\t/**\n\t * @implements {IWamProcessor}\n\t */\n\tclass WamProcessor extends AudioWorkletProcessor {\n\t\t/**\n\t\t * @param {AudioWorkletNodeOptions} options\n\t\t */\n\t\tconstructor(options) {\n\t\t\tsuper(options);\n\t\t\tconst {\n\t\t\t\tmoduleId,\n\t\t\t\tinstanceId,\n\t\t\t\tuseSab,\n\t\t\t} = options.processorOptions;\n\n\t\t\tif (!moduleId) throw Error('must provide moduleId argument in processorOptions!');\n\t\t\tif (!instanceId) throw Error('must provide instanceId argument in processorOptions!');\n\n\t\t\t/** @type {string} */\n\t\t\tthis.moduleId = moduleId;\n\t\t\t/** @type {string} */\n\t\t\tthis.instanceId = instanceId;\n\t\t\t/** @type {number} */\n\t\t\tthis._samplesPerQuantum = 128;\n\t\t\t/** @type {number} */\n\t\t\tthis._compensationDelay = 0;\n\t\t\t/** @type {WamParameterInfoMap} */\n\t\t\tthis._parameterInfo = {};\n\t\t\t/** @type {WamParameterMap} */\n\t\t\tthis._parameterState = {};\n\t\t\t/** @type {WamParameterInterpolatorMap} */\n\t\t\tthis._parameterInterpolators = {};\n\t\t\t/** @type {PendingWamEvent[]} */\n\t\t\tthis._eventQueue = [];\n\t\t\t/** @type {Record<number, (...args: any[]) => any>} */\n\t\t\tthis._pendingResponses = {};\n\t\t\t/** @type {boolean} */\n\t\t\tthis._useSab = !!useSab && !!globalThis.SharedArrayBuffer;\n\t\t\t/** @type {boolean} */\n\t\t\tthis._eventSabReady = false;\n\t\t\t/** @type {SharedArrayBuffer} */\n\t\t\tthis._audioToMainEventSab = null;\n\t\t\t/** @type {SharedArrayBuffer} */\n\t\t\tthis._mainToAudioEventSab = null;\n\t\t\t/** @type {WamEventRingBuffer} */\n\t\t\tthis._eventWriter = null;\n\t\t\t/** @type {WamEventRingBuffer} */\n\t\t\tthis._eventReader = null;\n\t\t\t/** @type {boolean} */\n\t\t\tthis._initialized = false;\n\t\t\t/** @type {boolean} */\n\t\t\tthis._destroyed = false;\n\n\t\t\twebAudioModules.create(this);\n\n\t\t\tthis.port.onmessage = this._onMessage.bind(this);\n\n\t\t\tif (this._useSab) this._configureSab();\n\t\t}\n\n\t\t/**\n\t\t * Compensation delay hint in seconds.\n\t\t * @returns {number}\n\t\t */\n\t\tgetCompensationDelay() { return this._compensationDelay; }\n\n\t\t/**\n\t\t * Schedule a WamEvent.\n\t\t * Listeners will be triggered when the event is processed.\n\t\t * @param {WamEvent[]} events\n\t\t */\n\t\tscheduleEvents(...events) {\n\t\t\tlet i = 0;\n\t\t\twhile (i < events.length) {\n\t\t\t\t// no need for ids if scheduled from audio thread\n\t\t\t\tthis._eventQueue.push({ id: 0, event: events[i] });\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Schedule events for all the downstream WAMs\n\t\t * @param {WamEvent[]} events\n\t\t */\n\t\temitEvents(...events) {\n\t\t\twebAudioModules.emitEvents(this, ...events);\n\t\t}\n\n\t\t/**\n\t\t * Clear all pending WamEvents.\n\t\t */\n\t\tclearEvents() {\n\t\t\tthis._eventQueue = [];\n\t\t}\n\n\t\t/**\n\t\t * Process a block of samples. Note that `parameters` argument is ignored.\n\t\t * @param {Float32Array[][]} inputs\n\t\t * @param {Float32Array[][]} outputs\n\t\t * @param {{[x: string]: Float32Array}} parameters\n\t\t */\n\t\tprocess(inputs, outputs, parameters) {\n\t\t\tif (!this._initialized) return true;\n\t\t\tif (this._destroyed) return false;\n\t\t\tif (this._eventSabReady) this.scheduleEvents(...this._eventReader.read());\n\n\t\t\tconst processingSlices = this._getProcessingSlices();\n\t\t\tlet i = 0;\n\t\t\twhile (i < processingSlices.length) {\n\t\t\t\tconst { range, events } = processingSlices[i];\n\t\t\t\tconst [startSample, endSample] = range;\n\t\t\t\t// pause to process events at proper sample\n\t\t\t\tlet j = 0;\n\t\t\t\twhile (j < events.length) {\n\t\t\t\t\tthis._processEvent(events[j]);\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t\t// perform parameter interpolation\n\t\t\t\tthis._interpolateParameterValues(startSample, endSample);\n\t\t\t\t// continue processing\n\t\t\t\tthis._process(startSample, endSample, inputs, outputs, parameters);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\t/**\n\t\t * Stop processing and remove the node from the WAM event graph.\n\t\t */\n\t\tdestroy() {\n\t\t\tthis._destroyed = true;\n\t\t\tthis.port.close();\n\t\t\twebAudioModules.destroy(this);\n\t\t}\n\n\t\t/**\n\t\t * Override to generate map of WamParameterInfo objects.\n\t\t * @returns {WamParameterInfoMap}\n\t\t */\n\t\t_generateWamParameterInfo() { return {}; }\n\n\t\t/**\n\t\t * Post-constructor initialization method.\n\t\t */\n\t\t_initialize() {\n\t\t\tthis._parameterState = {};\n\t\t\tthis._parameterInterpolators = {};\n\t\t\tthis._parameterInfo = this._generateWamParameterInfo();\n\t\t\tObject.keys(this._parameterInfo).forEach((parameterId) => {\n\t\t\t\tconst info = this._parameterInfo[parameterId];\n\t\t\t\tthis._parameterState[parameterId] = new WamParameter(this._parameterInfo[parameterId]);\n\t\t\t\tthis._parameterInterpolators[parameterId] = new WamParameterInterpolator(info, 256);\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Communicate with WamNode to configure SharedArrayBuffers.\n\t\t */\n\t\t_configureSab() {\n\t\t\tconst eventCapacity = 2 ** 10;\n\t\t\tconst parameterIds = Object.keys(this._parameterInfo);\n\t\t\tif (this._eventSabReady) {\n\t\t\t\t// if parameter set changes after initialization\n\t\t\t\tthis._eventWriter.setParameterIds(parameterIds);\n\t\t\t\tthis._eventReader.setParameterIds(parameterIds);\n\t\t\t}\n\t\t\tthis.port.postMessage({ eventSab: { eventCapacity, parameterIds } });\n\t\t}\n\n\t\t/**\n\t\t * Messages from main thread appear here.\n\t\t * @param {MessageEvent} message\n\t\t */\n\t\tasync _onMessage(message) {\n\t\t\tif (message.data.request) {\n\t\t\t\tconst {\n\t\t\t\t\tid, request, content,\n\t\t\t\t} = message.data;\n\t\t\t\tconst response = { id, response: request };\n\t\t\t\tconst requestComponents = request.split('/');\n\t\t\t\tconst verb = requestComponents[0];\n\t\t\t\tconst noun = requestComponents[1];\n\t\t\t\tresponse.content = 'error';\n\t\t\t\tif (verb === 'get') {\n\t\t\t\t\tif (noun === 'parameterInfo') {\n\t\t\t\t\t\tlet { parameterIds } = content;\n\t\t\t\t\t\tif (!parameterIds.length) parameterIds = Object.keys(this._parameterInfo);\n\t\t\t\t\t\tconst parameterInfo = {};\n\t\t\t\t\t\tlet i = 0;\n\t\t\t\t\t\twhile (i < parameterIds.length) {\n\t\t\t\t\t\t\tconst parameterId = parameterIds[i];\n\t\t\t\t\t\t\tparameterInfo[parameterId] = this._parameterInfo[parameterId];\n\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponse.content = parameterInfo;\n\t\t\t\t\t} else if (noun === 'parameterValues') {\n\t\t\t\t\t\t/*eslint-disable-next-line prefer-const */\n\t\t\t\t\t\tlet { normalized, parameterIds } = content;\n\t\t\t\t\t\tresponse.content = this._getParameterValues(normalized, parameterIds);\n\t\t\t\t\t} else if (noun === 'state') {\n\t\t\t\t\t\tresponse.content = this._getState();\n\t\t\t\t\t\t// ...additional state?\n\t\t\t\t\t} else if (noun === 'compensationDelay') {\n\t\t\t\t\t\tresponse.content = this.getCompensationDelay();\n\t\t\t\t\t}\n\t\t\t\t} else if (verb === 'set') {\n\t\t\t\t\tif (noun === 'parameterValues') {\n\t\t\t\t\t\tconst { parameterValues } = content;\n\t\t\t\t\t\tthis._setParameterValues(parameterValues, true);\n\t\t\t\t\t\tdelete response.content;\n\t\t\t\t\t} else if (noun === 'state') {\n\t\t\t\t\t\tconst { state } = content;\n\t\t\t\t\t\tthis._setState(state);\n\t\t\t\t\t\t// ...additional state?\n\t\t\t\t\t\tdelete response.content;\n\t\t\t\t\t}\n\t\t\t\t} else if (verb === 'add') {\n\t\t\t\t\tif (noun === 'event') {\n\t\t\t\t\t\tconst { event } = content;\n\t\t\t\t\t\tthis._eventQueue.push({ id, event });\n\t\t\t\t\t\treturn; // defer postMessage until event is processed\n\t\t\t\t\t}\n\t\t\t\t} else if (verb === 'remove') {\n\t\t\t\t\tif (noun === 'events') {\n\t\t\t\t\t\tconst ids = this._eventQueue.map((queued) => queued.id);\n\t\t\t\t\t\tthis.clearEvents();\n\t\t\t\t\t\tresponse.content = ids;\n\t\t\t\t\t}\n\t\t\t\t} else if (verb === 'connect') {\n\t\t\t\t\tif (noun === 'events') {\n\t\t\t\t\t\tconst { wamInstanceId, output } = content;\n\t\t\t\t\t\tthis._connectEvents(wamInstanceId, output);\n\t\t\t\t\t\tdelete response.content;\n\t\t\t\t\t}\n\t\t\t\t} else if (verb === 'disconnect') {\n\t\t\t\t\tif (noun === 'events') {\n\t\t\t\t\t\tconst { wamInstanceId, output } = content;\n\t\t\t\t\t\tthis._disconnectEvents(wamInstanceId, output);\n\t\t\t\t\t\tdelete response.content;\n\t\t\t\t\t}\n\t\t\t\t} else if (verb === 'initialize') {\n\t\t\t\t\tif (noun === 'processor') {\n\t\t\t\t\t\tthis._initialize();\n\t\t\t\t\t\tthis._initialized = true;\n\t\t\t\t\t\tdelete response.content;\n\t\t\t\t\t}\n\t\t\t\t\telse if (noun === 'eventSab') {\n\t\t\t\t\t\tconst { mainToAudioEventSab, audioToMainEventSab } = content;\n\n\t\t\t\t\t\t/** @private @type {SharedArrayBuffer} */\n\t\t\t\t\t\tthis._audioToMainEventSab = audioToMainEventSab;\n\n\t\t\t\t\t\t/** @private @type {SharedArrayBuffer} */\n\t\t\t\t\t\tthis._mainToAudioEventSab = mainToAudioEventSab;\n\n\t\t\t\t\t\tconst parameterIds = Object.keys(this._parameterInfo);\n\t\t\t\t\t\t/** @private @type {WamEventRingBuffer} */\n\t\t\t\t\t\tthis._eventWriter = new WamEventRingBuffer(RingBuffer, this._audioToMainEventSab,\n\t\t\t\t\t\t\tparameterIds);\n\t\t\t\t\t\t/** @private @type {WamEventRingBuffer} */\n\t\t\t\t\t\tthis._eventReader = new WamEventRingBuffer(RingBuffer, this._mainToAudioEventSab,\n\t\t\t\t\t\t\tparameterIds);\n\n\t\t\t\t\t\tthis._eventSabReady = true;\n\t\t\t\t\t\tdelete response.content;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.port.postMessage(response);\n\t\t\t} else if (message.data.destroy) {\n\t\t\t\tthis.destroy();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {WamTransportData} transportData\n\t\t */\n\t\t_onTransport(transportData) {\n\t\t\t// Override for custom transport handling\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error('_onTransport not implemented!');\n\t\t}\n\n\t\t/**\n\t\t * @param {WamMidiData} midiData\n\t\t */\n\t\t_onMidi(midiData) {\n\t\t\t// Override for custom midi handling\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error('_onMidi not implemented!');\n\t\t}\n\n\t\t/**\n\t\t * @param {WamBinaryData} sysexData\n\t\t */\n\t\t_onSysex(sysexData) {\n\t\t\t// Override for custom sysex handling\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error('_onMidi not implemented!');\n\t\t}\n\n\t\t/**\n\t\t * @param {WamMidiData} mpeData\n\t\t */\n\t\t_onMpe(mpeData) {\n\t\t\t// Override for custom mpe handling\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error('_onMpe not implemented!');\n\t\t}\n\n\t\t/**\n\t\t * @param {WamBinaryData} oscData\n\t\t */\n\t\t_onOsc(oscData) {\n\t\t\t// Override for custom osc handling\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error('_onOsc not implemented!');\n\t\t}\n\n\t\t/**\n\t\t * @param {any} state\n\t\t */\n\t\t_setState(state) {\n\t\t\tif (state.parameterValues) this._setParameterValues(state.parameterValues, false);\n\t\t}\n\n\t\t/**\n\t\t * @returns {any}\n\t\t */\n\t\t_getState() {\n\t\t\treturn { parameterValues: this._getParameterValues(false) };\n\t\t}\n\n\t\t/**\n\t\t * @param {boolean} normalized\n\t\t * @param {string[]=} parameterIds\n\t\t * @returns {WamParameterDataMap}\n\t\t */\n\t\t_getParameterValues(normalized, parameterIds) {\n\t\t\t/** @type {WamParameterDataMap} */\n\t\t\tconst parameterValues = {};\n\t\t\tif (!parameterIds || !parameterIds.length) parameterIds = Object.keys(this._parameterState);\n\t\t\tlet i = 0;\n\t\t\twhile (i < parameterIds.length) {\n\t\t\t\tconst id = parameterIds[i];\n\t\t\t\t/** @type {WamParameter} */\n\t\t\t\tconst parameter = this._parameterState[id];\n\t\t\t\tparameterValues[id] = {\n\t\t\t\t\tid,\n\t\t\t\t\tvalue: normalized ? parameter.normalizedValue : parameter.value,\n\t\t\t\t\tnormalized,\n\t\t\t\t};\n\t\t\t\ti++;\n\t\t\t}\n\t\t\treturn parameterValues;\n\t\t}\n\n\t\t/**\n\t\t * @param {WamParameterDataMap} parameterUpdates\n\t\t * @param {boolean} interpolate\n\t\t */\n\t\t_setParameterValues(parameterUpdates, interpolate) {\n\t\t\tconst parameterIds = Object.keys(parameterUpdates);\n\t\t\tlet i = 0;\n\t\t\twhile (i < parameterIds.length) {\n\t\t\t\tthis._setParameterValue(parameterUpdates[parameterIds[i]], interpolate);\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {WamParameterData} parameterUpdate\n\t\t * @param {boolean} interpolate\n\t\t */\n\t\t_setParameterValue(parameterUpdate, interpolate) {\n\t\t\tconst { id, value, normalized } = parameterUpdate;\n\t\t\t/** @type {WamParameter} */\n\t\t\tconst parameter = this._parameterState[id];\n\t\t\tif (!parameter) return;\n\t\t\tif (!normalized) parameter.value = value;\n\t\t\telse parameter.normalizedValue = value;\n\t\t\tconst interpolator = this._parameterInterpolators[id];\n\t\t\tif (interpolate) interpolator.setEndValue(parameter.value);\n\t\t\telse interpolator.setStartValue(parameter.value);\n\t\t}\n\n\t\t/**\n\t\t * @param {number} startIndex\n\t\t * @param {number} endIndex\n\t\t */\n\t\t_interpolateParameterValues(startIndex, endIndex) {\n\t\t\tconst parameterIds = Object.keys(this._parameterInterpolators);\n\t\t\tlet i = 0;\n\t\t\twhile (i < parameterIds.length) {\n\t\t\t\tthis._parameterInterpolators[parameterIds[i]].process(startIndex, endIndex);\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} wamInstanceId\n\t\t * @param {number} [output]\n\t\t */\n\t\t_connectEvents(wamInstanceId, output) {\n\t\t\twebAudioModules.connectEvents(this.instanceId, wamInstanceId, output);\n\t\t}\n\n\t\t/**\n\t\t * @param {string} [wamInstanceId]\n\t\t * @param {number} [output]\n\t\t */\n\t\t_disconnectEvents(wamInstanceId, output) {\n\t\t\tif (typeof wamInstanceId === 'undefined') {\n\t\t\t\twebAudioModules.disconnectEvents(this.instanceId);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\twebAudioModules.disconnectEvents(this.instanceId, wamInstanceId, output);\n\t\t}\n\n\t\t/**\n\t\t * Example implementation of custom sample accurate event scheduling.\n\t\t * @returns {ProcessingSlice[]}\n\t\t * */\n\t\t_getProcessingSlices() {\n\t\t\tconst response = 'add/event';\n\t\t\t/** @ts-ignore */\n\t\t\tconst { currentTime, sampleRate } = audioWorkletGlobalScope;\n\t\t\t/** @type {{[sampleIndex: number]: WamEvent[]}} */\n\t\t\tconst eventsBySampleIndex = {};\n\t\t\t// assumes events arrive sorted by time\n\t\t\tlet i = 0;\n\t\t\twhile (i < this._eventQueue.length) {\n\t\t\t\tconst { id, event } = this._eventQueue[i];\n\t\t\t\tconst offsetSec = event.time - currentTime;\n\t\t\t\tconst sampleIndex = offsetSec > 0 ? Math.round(offsetSec * sampleRate) : 0;\n\t\t\t\tif (sampleIndex < this._samplesPerQuantum) {\n\t\t\t\t\tif (eventsBySampleIndex[sampleIndex]) eventsBySampleIndex[sampleIndex].push(event);\n\t\t\t\t\telse eventsBySampleIndex[sampleIndex] = [event];\n\t\t\t\t\t// notify main thread\n\t\t\t\t\tif (id) this.port.postMessage({ id, response });\n\t\t\t\t\telse if (this._eventSabReady) this._eventWriter.write(event);\n\t\t\t\t\telse this.port.postMessage({ event });\n\t\t\t\t\tthis._eventQueue.shift();\n\t\t\t\t\ti = -1;\n\t\t\t\t} else break;\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\t/** @type {ProcessingSlice[]} */\n\t\t\tconst processingSlices = [];\n\t\t\tconst keys = Object.keys(eventsBySampleIndex);\n\t\t\tif (keys[0] !== '0') {\n\t\t\t\tkeys.unshift('0');\n\t\t\t\teventsBySampleIndex['0'] = [];\n\t\t\t}\n\t\t\tconst lastIndex = keys.length - 1;\n\t\t\ti = 0;\n\t\t\twhile (i < keys.length) {\n\t\t\t\tconst key = keys[i];\n\t\t\t\tconst startSample = parseInt(key);\n\t\t\t\tconst endSample = (i < lastIndex) ? parseInt(keys[i + 1]) : this._samplesPerQuantum;\n\t\t\t\tprocessingSlices.push({ range: [startSample, endSample], events: eventsBySampleIndex[key] });\n\t\t\t\ti++;\n\t\t\t}\n\t\t\treturn processingSlices;\n\t\t}\n\n\t\t/** @param {WamEvent} event */\n\t\t_processEvent(event) {\n\t\t\tswitch (event.type) {\n\t\t\tcase 'wam-automation': this._setParameterValue(event.data, true); break;\n\t\t\tcase 'wam-transport': this._onTransport(event.data); break;\n\t\t\tcase 'wam-midi': this._onMidi(event.data); break;\n\t\t\tcase 'wam-sysex': this._onSysex(event.data); break;\n\t\t\tcase 'wam-mpe': this._onMpe(event.data); break;\n\t\t\tcase 'wam-osc': this._onOsc(event.data); break;\n\t\t\tdefault: break;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Override this to implement custom DSP.\n\t\t * @param {number} startSample beginning of processing slice\n\t\t * @param {number} endSample end of processing slice\n\t\t * @param {Float32Array[][]} inputs\n\t\t * @param {Float32Array[][]} outputs\n\t\t * @param {{[x: string]: Float32Array}} parameters\n\t\t */\n\t\t_process(startSample, endSample, inputs, outputs, parameters) {\n\t\t\t// Override for custom processing\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error('_process not implemented!');\n\t\t}\n\t}\n\n\tif (audioWorkletGlobalScope.AudioWorkletProcessor) {\n\t\tif (!ModuleScope.WamProcessor) ModuleScope.WamProcessor = WamProcessor;\n\t}\n\n\treturn WamProcessor;\n};\n\nexport default getWamProcessor;\n", "/** @typedef {import('@webaudiomodules/api').WamNode} IWamNode */\n/** @typedef {import('@webaudiomodules/api').WebAudioModule} WebAudioModule */\n/** @typedef {import('@webaudiomodules/api').WamParameterInfoMap} WamParameterInfoMap */\n/** @typedef {import('@webaudiomodules/api').WamParameterDataMap} WamParameterDataMap */\n/** @typedef {import('@webaudiomodules/api').WamEvent} WamEvent */\n/** @typedef {import('@webaudiomodules/api').WamEventType} WamEventType */\n/** @typedef {import('./types').WamEventRingBuffer} WamEventRingBuffer */\n\nimport addFunctionModule from './addFunctionModule.js';\nimport getRingBuffer from './RingBuffer.js';\nimport getWamArrayRingBuffer from './WamArrayRingBuffer.js';\nimport getWamEventRingBuffer from './WamEventRingBuffer.js';\nimport getWamParameter from './WamParameter.js';\nimport getWamParameterInfo from './WamParameterInfo.js';\nimport getWamParameterInterpolator from './WamParameterInterpolator.js';\nimport getWamProcessor from './WamProcessor.js';\n\nconst RingBuffer = getRingBuffer();\nconst WamEventRingBuffer = getWamEventRingBuffer();\n\n/**\n * @implements {IWamNode}\n */\nexport default class WamNode extends AudioWorkletNode {\n\t/**\n\t * Register scripts required for the processor. Must be called before constructor.\n\t * @param {BaseAudioContext} audioContext\n\t * @param {string} moduleId\n\t */\n\tstatic async addModules(audioContext, moduleId) {\n\t\tconst { audioWorklet } = audioContext;\n\t\tawait addFunctionModule(audioWorklet, getRingBuffer, moduleId);\n\t\tawait addFunctionModule(audioWorklet, getWamEventRingBuffer, moduleId);\n\t\tawait addFunctionModule(audioWorklet, getWamArrayRingBuffer, moduleId);\n\t\tawait addFunctionModule(audioWorklet, getWamParameter, moduleId);\n\t\tawait addFunctionModule(audioWorklet, getWamParameterInfo, moduleId);\n\t\tawait addFunctionModule(audioWorklet, getWamParameterInterpolator, moduleId);\n\t\tawait addFunctionModule(audioWorklet, getWamProcessor, moduleId);\n\t}\n\n\t/**\n\t * @param {WebAudioModule} module\n\t * @param {AudioWorkletNodeOptions} options\n\t */\n\tconstructor(module, options) {\n\t\tconst { audioContext, moduleId, instanceId } = module;\n\t\toptions.processorOptions = {\n\t\t\tmoduleId,\n\t\t\tinstanceId,\n\t\t\t...options.processorOptions,\n\t\t};\n\t\tsuper(audioContext, moduleId, options);\n\n\t\t/** @type {WebAudioModule} */\n\t\tthis.module = module;\n\t\t/** @private @type {Set<WamEventType>} */\n\t\tthis._supportedEventTypes = new Set(['wam-automation', 'wam-transport', 'wam-midi', 'wam-sysex', 'wam-mpe', 'wam-osc']);\n\t\t/** @private @type {number} */\n\t\tthis._messageId = 1;\n\t\t/** @private @type {Record<number, (...args: any[]) => any>} */\n\t\tthis._pendingResponses = {};\n\t\t/** @private @type {Record<number, () => any>} */\n\t\tthis._pendingEvents = {};\n\t\t/** @private @type {boolean} */\n\t\tthis._useSab = false; // can override this via processorOptions;\n\t\t/** @private @type {boolean} */\n\t\tthis._eventSabReady = false;\n\t\t/** @private @type {boolean} */\n\t\tthis._destroyed = false;\n\n\t\tthis.port.onmessage = this._onMessage.bind(this);\n\t}\n\n\t/** @returns {string} */\n\tget moduleId() { return this.module.moduleId; }\n\t/** @returns {string} */\n\tget instanceId() { return this.module.instanceId; }\n\t/** @returns {string} */\n\tget processorId() { return this.moduleId; }\n\n\t/**\n\t * Get parameter info for the specified parameter ids,\n\t * or omit argument to get info for all parameters.\n\t * @param {string[]} parameterIds\n\t * @returns {Promise<WamParameterInfoMap>}\n\t */\n\tasync getParameterInfo(...parameterIds) {\n\t\tconst request = 'get/parameterInfo';\n\t\tconst id = this._generateMessageId();\n\t\treturn new Promise((resolve) => {\n\t\t\tthis._pendingResponses[id] = resolve;\n\t\t\tthis.port.postMessage({\n\t\t\t\tid,\n\t\t\t\trequest,\n\t\t\t\tcontent: { parameterIds },\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Get parameter values for the specified parameter ids,\n\t * or omit argument to get values for all parameters.\n\t * @param {boolean} normalized\n\t * @param {string[]} parameterIds\n\t * @returns {Promise<WamParameterDataMap>}\n\t */\n\tasync getParameterValues(normalized, ...parameterIds) {\n\t\tconst request = 'get/parameterValues';\n\t\tconst id = this._generateMessageId();\n\t\treturn new Promise((resolve) => {\n\t\t\tthis._pendingResponses[id] = resolve;\n\t\t\tthis.port.postMessage({\n\t\t\t\tid,\n\t\t\t\trequest,\n\t\t\t\tcontent: { normalized, parameterIds },\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Set parameter values for the specified parameter ids.\n\t * @param {WamParameterDataMap} parameterValues\n\t * @returns {Promise<void>}\n\t */\n\tasync setParameterValues(parameterValues) {\n\t\tconst request = 'set/parameterValues';\n\t\tconst id = this._generateMessageId();\n\t\treturn new Promise((resolve) => {\n\t\t\tthis._pendingResponses[id] = resolve;\n\t\t\tthis.port.postMessage({\n\t\t\t\tid,\n\t\t\t\trequest,\n\t\t\t\tcontent: { parameterValues },\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Returns an object (such as JSON or a serialized blob)\n\t * that can be used to restore the WAM's state.\n\t * @returns {Promise<any>}\n\t */\n\tasync getState() {\n\t\tconst request = 'get/state';\n\t\t// perhaps the only info to request from processor is param state?\n\t\tconst id = this._generateMessageId();\n\t\treturn new Promise((resolve) => {\n\t\t\tthis._pendingResponses[id] = resolve;\n\t\t\tthis.port.postMessage({ id, request });\n\t\t});\n\t}\n\n\t/**\n\t * Use an object (such as JSON or a serialized blob)\n\t * to restore the WAM's state.\n\t * @param {any} state\n\t */\n\tasync setState(state) {\n\t\tconst request = 'set/state';\n\t\tconst id = this._generateMessageId();\n\t\t// perhaps the only info to send to processor is param state?\n\t\treturn new Promise((resolve) => {\n\t\t\tthis._pendingResponses[id] = resolve;\n\t\t\tthis.port.postMessage({\n\t\t\t\tid,\n\t\t\t\trequest,\n\t\t\t\tcontent: { state },\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Compensation delay hint in seconds.\n\t * @returns {Promise<number>}\n\t */\n\tasync getCompensationDelay() {\n\t\tconst request = 'get/compensationDelay';\n\t\tconst id = this._generateMessageId();\n\t\treturn new Promise((resolve) => {\n\t\t\tthis._pendingResponses[id] = resolve;\n\t\t\tthis.port.postMessage({ id, request });\n\t\t});\n\t}\n\n\t/**\n\t * Register a callback function so it will be called\n\t * when matching events are processed.\n\t * @param {WamEventType} type\n\t * @param {EventListenerOrEventListenerObject | null} callback\n\t * @param {AddEventListenerOptions | boolean} options;\n\t */\n\taddEventListener(type, callback, options) {\n\t\tif (this._supportedEventTypes.has(type)) super.addEventListener(type, callback, options);\n\t}\n\n\t/**\n\t * Deregister a callback function so it will no longer\n\t * be called when matching events are processed.\n\t * @param {WamEventType} type\n\t * @param {EventListenerOrEventListenerObject | null} callback\n\t * @param {AddEventListenerOptions | boolean} options;\n\t */\n\tremoveEventListener(type, callback, options) {\n\t\tif (this._supportedEventTypes.has(type)) super.removeEventListener(type, callback, options);\n\t}\n\n\t/**\n\t * From the main thread, schedule a WamEvent.\n\t * Listeners will be triggered when the event is processed.\n\t * @param {WamEvent[]} events\n\t */\n\tscheduleEvents(...events) {\n\t\tlet i = 0;\n\t\tconst numEvents = events.length;\n\t\tif (this._eventSabReady) {\n\t\t\ti = this._eventWriter.write(...events);\n\t\t\t// fall back on message port if ring buffer gets full\n\t\t}\n\t\twhile (i < numEvents) {\n\t\t\tconst event = events[i];\n\t\t\tconst request = 'add/event';\n\t\t\tconst id = this._generateMessageId();\n\t\t\tlet processed = false;\n\t\t\tnew Promise((resolve, reject) => {\n\t\t\t\tthis._pendingResponses[id] = resolve;\n\t\t\t\tthis._pendingEvents[id] = () => { if (!processed) reject(); };\n\t\t\t\tthis.port.postMessage({\n\t\t\t\t\tid,\n\t\t\t\t\trequest,\n\t\t\t\t\tcontent: { event },\n\t\t\t\t});\n\t\t\t}).then((resolved) => {\n\t\t\t\tprocessed = true;\n\t\t\t\tdelete this._pendingEvents[id];\n\t\t\t\tthis._onEvent(event);\n\t\t\t}).catch((rejected) => { delete this._pendingResponses[id]; });\n\t\t\ti++;\n\t\t}\n\t}\n\n\t/** From the main thread, clear all pending WamEvents. */\n\tasync clearEvents() {\n\t\tconst request = 'remove/events';\n\t\tconst id = this._generateMessageId();\n\t\treturn new Promise((resolve) => {\n\t\t\tconst ids = Object.keys(this._pendingEvents);\n\t\t\tif (ids.length) {\n\t\t\t\tthis._pendingResponses[id] = resolve;\n\t\t\t\tthis.port.postMessage({ id, request });\n\t\t\t}\n\t\t}).then((clearedIds) => {\n\t\t\tclearedIds.forEach((clearedId) => {\n\t\t\t\tthis._pendingEvents[clearedId]();\n\t\t\t\tdelete this._pendingEvents[clearedId];\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * @param {string} toId the instanceId of the destination WAM for the event stream\n\t * @param {number} [output] the event output stream of the source WAM\n\t */\n\tconnectEvents(toId, output) {\n\t\tconst request = 'connect/events';\n\t\tconst id = this._generateMessageId();\n\t\tnew Promise((resolve, reject) => {\n\t\t\tthis._pendingResponses[id] = resolve;\n\t\t\tthis.port.postMessage({\n\t\t\t\tid,\n\t\t\t\trequest,\n\t\t\t\tcontent: { wamInstanceId: toId, output },\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * @param {string} [toId] the instanceId of the destination WAM for the event stream\n\t * @param {number} [output]\n\t */\n\tdisconnectEvents(toId, output) {\n\t\tconst request = 'disconnect/events';\n\t\tconst id = this._generateMessageId();\n\t\tnew Promise((resolve, reject) => {\n\t\t\tthis._pendingResponses[id] = resolve;\n\t\t\tthis.port.postMessage({\n\t\t\t\tid,\n\t\t\t\trequest,\n\t\t\t\tcontent: { wamInstanceId: toId, output },\n\t\t\t});\n\t\t});\n\t}\n\n\t/** Stop processing and remove the node from the graph. */\n\tdestroy() {\n\t\tif (this._audioToMainInterval) clearInterval(this._audioToMainInterval);\n\t\tthis.port.postMessage({ destroy: true });\n\t\tthis.port.close();\n\t\tthis.disconnect();\n\t\tthis._destroyed = true;\n\t}\n\n\t_generateMessageId() {\n\t\t/* eslint-disable-next-line no-plusplus */\n\t\treturn this._messageId++;\n\t}\n\n\t/**\n\t * Post-constructor (asynchronous) initialization method.\n\t */\n\tasync _initialize() {\n\t\tconst request = 'initialize/processor';\n\t\tconst id = this._generateMessageId();\n\t\treturn new Promise((resolve) => {\n\t\t\tthis._pendingResponses[id] = resolve;\n\t\t\tthis.port.postMessage({ id, request });\n\t\t});\n\t}\n\n\t/**\n\t * Messages from audio thread\n\t * @param {MessageEvent} message\n\t * */\n\t_onMessage(message) {\n\t\tconst { data } = message;\n\t\tconst { response, event, eventSab } = data;\n\t\tif (response) {\n\t\t\tconst { id, content } = data;\n\t\t\tconst resolvePendingResponse = this._pendingResponses[id];\n\t\t\tif (resolvePendingResponse) {\n\t\t\t\tdelete this._pendingResponses[id];\n\t\t\t\tresolvePendingResponse(content);\n\t\t\t}\n\t\t\t// else console.log(`unhandled message | response: ${response} content: ${content}`);\n\t\t} else if (eventSab) {\n\t\t\tthis._useSab = true;\n\t\t\tconst { eventCapacity, parameterIds } = eventSab;\n\n\t\t\tif (this._eventSabReady) {\n\t\t\t\t// if parameter set changes after initialization\n\t\t\t\tthis._eventWriter.setParameterIds(parameterIds);\n\t\t\t\tthis._eventReader.setParameterIds(parameterIds);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @private @type {SharedArrayBuffer} */\n\t\t\tthis._mainToAudioEventSab = WamEventRingBuffer.getStorageForEventCapacity(RingBuffer,\n\t\t\t\teventCapacity);\n\n\t\t\t/** @private @type {SharedArrayBuffer} */\n\t\t\tthis._audioToMainEventSab = WamEventRingBuffer.getStorageForEventCapacity(RingBuffer,\n\t\t\t\teventCapacity);\n\n\t\t\t/** @private @type {WamEventRingBuffer} */\n\t\t\tthis._eventWriter = new WamEventRingBuffer(RingBuffer, this._mainToAudioEventSab,\n\t\t\t\tparameterIds);\n\t\t\t/** @private @type {WamEventRingBuffer} */\n\t\t\tthis._eventReader = new WamEventRingBuffer(RingBuffer, this._audioToMainEventSab,\n\t\t\t\tparameterIds);\n\n\t\t\tconst request = 'initialize/eventSab';\n\t\t\tconst id = this._generateMessageId();\n\t\t\tnew Promise((resolve, reject) => {\n\t\t\t\tthis._pendingResponses[id] = resolve;\n\t\t\t\tthis.port.postMessage({\n\t\t\t\t\tid,\n\t\t\t\t\trequest,\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\tmainToAudioEventSab: this._mainToAudioEventSab,\n\t\t\t\t\t\taudioToMainEventSab: this._audioToMainEventSab,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}).then((resolved) => {\n\t\t\t\tthis._eventSabReady = true;\n\n\t\t\t\t// periodically check for messages from audio thread\n\t\t\t\tthis._audioToMainInterval = setInterval(() => {\n\t\t\t\t\tconst events = this._eventReader.read();\n\t\t\t\t\tevents.forEach((e) => { this._onEvent(e); });\n\t\t\t\t}, 100);\n\t\t\t});\n\t\t} else if (event) this._onEvent(event);\n\t}\n\n\t_onEvent(event) {\n\t\tconst { type } = event;\n\t\tthis.dispatchEvent(new CustomEvent(type, {\n\t\t\tbubbles: true,\n\t\t\tdetail: event,\n\t\t}));\n\t}\n}\n", "/** @typedef {import('@webaudiomodules/api').WamProcessor} WamProcessor */\n/** @typedef {import('@webaudiomodules/api').WamParameterInfoMap} WamParameterInfoMap */\n/** @typedef {import('@webaudiomodules/api').WamParameterDataMap} WamParameterValueMap */\n/** @typedef {import('@webaudiomodules/api').WamEvent} WamEvent */\n/** @typedef {import('./types').ParamMgrOptions} ParamMgrProcessorOptions */\n/** @typedef {import('./TypedAudioWorklet').AudioWorkletGlobalScope} AudioWorkletGlobalScope */\n/** @typedef {import('./TypedAudioWorklet').TypedAudioWorkletProcessor} AudioWorkletProcessor */\n/** @template M @typedef {import('./types').MessagePortRequest<M>} MessagePortRequest */\n/** @template M @typedef {import('./types').MessagePortResponse<M>} MessagePortResponse */\n/** @typedef {import('./types').ParamMgrCallFromProcessor} ParamMgrCallFromProcessor */\n/** @typedef {import('./types').ParamMgrCallToProcessor} ParamMgrCallToProcessor */\n/** @typedef {import('./types').ParamMgrAudioWorkletOptions} ParamMgrAudioWorkletOptions */\n/** @typedef {import('./types').ParametersMapping} ParametersMapping */\n\n/**\n * Main function to stringify as a worklet.\n *\n * @param {string} processorId processor identifier\n * @param {WamParameterInfoMap} paramsConfig parameterDescriptors\n */\nconst processor = (processorId, paramsConfig) => {\n\t/** @type {AudioWorkletGlobalScope} */\n\t// @ts-ignore\n\tconst audioWorkletGlobalScope = globalThis;\n\tconst {\n\t\tAudioWorkletProcessor,\n\t\tregisterProcessor,\n\t\twebAudioModules,\n\t} = audioWorkletGlobalScope;\n\n\tconst supportSharedArrayBuffer = !!globalThis.SharedArrayBuffer;\n\tconst SharedArrayBuffer = globalThis.SharedArrayBuffer || globalThis.ArrayBuffer;\n\tconst normExp = (x, e) => (e === 0 ? x : x ** (1.5 ** -e));\n\tconst normalizeE = (x, min, max, e = 0) => (\n\t\tmin === 0 && max === 1\n\t\t\t? normExp(x, e)\n\t\t\t: normExp((x - min) / (max - min) || 0, e));\n\tconst normalize = (x, min, max) => (min === 0 && max === 1 ? x : (x - min) / (max - min) || 0);\n\tconst denormalize = (x, min, max) => (min === 0 && max === 1 ? x : x * (max - min) + min);\n\tconst mapValue = (x, eMin, eMax, sMin, sMax, tMin, tMax) => (\n\t\tdenormalize(\n\t\t\tnormalize(\n\t\t\t\tnormalize(\n\t\t\t\t\tMath.min(sMax, Math.max(sMin, x)),\n\t\t\t\t\teMin,\n\t\t\t\t\teMax,\n\t\t\t\t),\n\t\t\t\tnormalize(sMin, eMin, eMax),\n\t\t\t\tnormalize(sMax, eMin, eMax),\n\t\t\t),\n\t\t\ttMin,\n\t\t\ttMax,\n\t\t)\n\t);\n\n\t/**\n\t * @typedef {MessagePortRequest<ParamMgrCallToProcessor> & MessagePortResponse<ParamMgrCallFromProcessor>} MsgIn\n\t * @typedef {MessagePortResponse<ParamMgrCallToProcessor> & MessagePortRequest<ParamMgrCallFromProcessor>} MsgOut\n\t */\n\t/**\n\t * `ParamMgrNode`'s `AudioWorkletProcessor`\n\t *\n\t * @extends {AudioWorkletProcessor<MsgIn, MsgOut>}\n\t * @implements {WamProcessor}\n\t * @implements {ParamMgrCallToProcessor}\n\t */\n\tclass ParamMgrProcessor extends AudioWorkletProcessor {\n\t\tstatic get parameterDescriptors() {\n\t\t\treturn Object.entries(paramsConfig).map(([name, { defaultValue, minValue, maxValue }]) => ({\n\t\t\t\tname,\n\t\t\t\tdefaultValue,\n\t\t\t\tminValue,\n\t\t\t\tmaxValue,\n\t\t\t}));\n\t\t}\n\n\t\t/**\n\t\t * @param {ParamMgrProcessorOptions} options\n\t\t */\n\t\tconstructor(options) {\n\t\t\tsuper(options);\n\t\t\tthis.destroyed = false;\n\t\t\tthis.supportSharedArrayBuffer = supportSharedArrayBuffer;\n\t\t\tconst {\n\t\t\t\tparamsMapping,\n\t\t\t\tinternalParamsMinValues,\n\t\t\t\tinternalParams,\n\t\t\t\tinstanceId,\n\t\t\t} = options.processorOptions;\n\t\t\tthis.moduleId = processorId;\n\t\t\tthis.instanceId = instanceId;\n\t\t\tthis.internalParamsMinValues = internalParamsMinValues;\n\t\t\tthis.paramsConfig = paramsConfig;\n\t\t\tthis.paramsMapping = paramsMapping;\n\t\t\t/** @type {Record<string, number>} */\n\t\t\tthis.paramsValues = {};\n\t\t\tObject.entries(paramsConfig).forEach(([name, { defaultValue }]) => {\n\t\t\t\tthis.paramsValues[name] = defaultValue;\n\t\t\t});\n\t\t\tthis.internalParams = internalParams;\n\t\t\tthis.internalParamsCount = this.internalParams.length;\n\t\t\tthis.buffer = new SharedArrayBuffer((this.internalParamsCount + 1) * Float32Array.BYTES_PER_ELEMENT);\n\t\t\tthis.$lock = new Int32Array(this.buffer, 0, 1);\n\t\t\tthis.$internalParamsBuffer = new Float32Array(this.buffer, 4, this.internalParamsCount);\n\t\t\t/** @type {WamEvent[]} */\n\t\t\tthis.eventQueue = [];\n\n\t\t\t/** @type {(event: WamEvent) => any} */\n\t\t\tthis.handleEvent = null;\n\n\t\t\taudioWorkletGlobalScope.webAudioModules.create(this);\n\n\t\t\tthis.messagePortRequestId = -1;\n\t\t\t/** @type {Record<number, ((...args: any[]) => any)>} */\n\t\t\tconst resolves = {};\n\t\t\t/** @type {Record<number, ((...args: any[]) => any)>} */\n\t\t\tconst rejects = {};\n\t\t\t/**\n\t\t\t * @param {keyof ParamMgrCallFromProcessor} call\n\t\t\t * @param {any} args\n\t\t\t */\n\t\t\tthis.call = (call, ...args) => new Promise((resolve, reject) => {\n\t\t\t\tconst id = this.messagePortRequestId--;\n\t\t\t\tresolves[id] = resolve;\n\t\t\t\trejects[id] = reject;\n\t\t\t\tthis.port.postMessage({ id, call, args });\n\t\t\t});\n\t\t\tthis.handleMessage = ({ data }) => {\n\t\t\t\tconst { id, call, args, value, error } = data;\n\t\t\t\tif (call) {\n\t\t\t\t\t/** @type {any} */\n\t\t\t\t\tconst r = { id };\n\t\t\t\t\ttry {\n\t\t\t\t\t\tr.value = this[call](...args);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tr.error = e;\n\t\t\t\t\t}\n\t\t\t\t\tthis.port.postMessage(r);\n\t\t\t\t} else {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\tif (rejects[id]) rejects[id](error);\n\t\t\t\t\t\tdelete rejects[id];\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (resolves[id]) {\n\t\t\t\t\t\tresolves[id](value);\n\t\t\t\t\t\tdelete resolves[id];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.port.start();\n\t\t\tthis.port.addEventListener('message', this.handleMessage);\n\t\t}\n\n\t\t/**\n\t\t * @param {ParametersMapping} mapping\n\t\t */\n\t\tsetParamsMapping(mapping) {\n\t\t\tthis.paramsMapping = mapping;\n\t\t}\n\n\t\tgetBuffer() {\n\t\t\treturn { lock: this.$lock, paramsBuffer: this.$internalParamsBuffer };\n\t\t}\n\n\t\tgetCompensationDelay() {\n\t\t\treturn 128;\n\t\t}\n\n\t\t/**\n\t\t * @param {string[]} parameterIdQuery\n\t\t */\n\t\tgetParameterInfo(...parameterIdQuery) {\n\t\t\tif (parameterIdQuery.length === 0) parameterIdQuery = Object.keys(this.paramsConfig);\n\t\t\t/** @type {WamParameterInfoMap} */\n\t\t\tconst parameterInfo = {};\n\t\t\tparameterIdQuery.forEach((parameterId) => {\n\t\t\t\tparameterInfo[parameterId] = this.paramsConfig[parameterId];\n\t\t\t});\n\t\t\treturn parameterInfo;\n\t\t}\n\n\t\t/**\n\t\t * @param {boolean} [normalized]\n\t\t * @param {string[]} parameterIdQuery\n\t\t */\n\t\tgetParameterValues(normalized, ...parameterIdQuery) {\n\t\t\tif (parameterIdQuery.length === 0) parameterIdQuery = Object.keys(this.paramsConfig);\n\t\t\t/** @type {WamParameterValueMap} */\n\t\t\tconst parameterValues = {};\n\t\t\tparameterIdQuery.forEach((parameterId) => {\n\t\t\t\tif (!(parameterId in this.paramsValues)) return;\n\t\t\t\tconst { minValue, maxValue, exponent } = this.paramsConfig[parameterId];\n\t\t\t\tconst value = this.paramsValues[parameterId];\n\t\t\t\tparameterValues[parameterId] = {\n\t\t\t\t\tid: parameterId,\n\t\t\t\t\tvalue: normalized ? normalizeE(value, minValue, maxValue, exponent) : value,\n\t\t\t\t\tnormalized,\n\t\t\t\t};\n\t\t\t});\n\t\t\treturn parameterValues;\n\t\t}\n\n\t\t/**\n\t\t * @param {WamEvent[]} events\n\t\t */\n\t\tscheduleEvents(...events) {\n\t\t\tthis.eventQueue.push(...events);\n\t\t\tconst { currentTime } = audioWorkletGlobalScope;\n\t\t\tthis.eventQueue.sort((a, b) => (a.time || currentTime) - (b.time || currentTime));\n\t\t}\n\n\t\t/**\n\t\t * @param {WamEvent[]} events\n\t\t */\n\t\temitEvents(...events) {\n\t\t\twebAudioModules.emitEvents(this, ...events);\n\t\t}\n\n\t\tclearEvents() {\n\t\t\tthis.eventQueue = [];\n\t\t}\n\n\t\tlock() {\n\t\t\tif (globalThis.Atomics) Atomics.store(this.$lock, 0, 1);\n\t\t}\n\n\t\tunlock() {\n\t\t\tif (globalThis.Atomics) Atomics.store(this.$lock, 0, 0);\n\t\t}\n\n\t\t/**\n\t\t * Main process\n\t\t *\n\t\t * @param {Float32Array[][]} inputs\n\t\t * @param {Float32Array[][]} outputs\n\t\t * @param {Record<string, Float32Array>} parameters\n\t\t */\n\t\tprocess(inputs, outputs, parameters) {\n\t\t\tif (this.destroyed) return false;\n\t\t\tconst outputOffset = 1;\n\t\t\tthis.lock();\n\t\t\tObject.entries(this.paramsConfig).forEach(([name, { minValue, maxValue }]) => {\n\t\t\t\tconst raw = parameters[name];\n\t\t\t\tif (name in this.paramsValues) this.paramsValues[name] = raw[raw.length - 1]; // Store to local temporary\n\t\t\t\tif (!this.paramsMapping[name]) return; // No need to output\n\t\t\t\tObject.entries(this.paramsMapping[name]).forEach(([targetName, targetMapping]) => {\n\t\t\t\t\tconst j = this.internalParams.indexOf(targetName);\n\t\t\t\t\tif (j === -1) return;\n\t\t\t\t\tconst intrinsicValue = this.internalParamsMinValues[j]; // Output will be added to target intrinsicValue\n\t\t\t\t\tconst { sourceRange, targetRange } = targetMapping;\n\t\t\t\t\tconst [sMin, sMax] = sourceRange;\n\t\t\t\t\tconst [tMin, tMax] = targetRange;\n\t\t\t\t\tlet out;\n\t\t\t\t\tif (minValue !== tMin || maxValue !== tMax\n\t\t\t\t\t\t\t|| minValue !== sMin || maxValue !== sMax) { // need to calculate with mapping\n\t\t\t\t\t\tout = raw.map((v) => {\n\t\t\t\t\t\t\tconst mappedValue = mapValue(v, minValue, maxValue, sMin, sMax, tMin, tMax);\n\t\t\t\t\t\t\treturn mappedValue - intrinsicValue;\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (intrinsicValue) { // need to correct with intrinsicValue\n\t\t\t\t\t\tout = raw.map((v) => v - intrinsicValue);\n\t\t\t\t\t} else { // No need to modify\n\t\t\t\t\t\tout = raw;\n\t\t\t\t\t}\n\t\t\t\t\tif (out.length === 1) outputs[j + outputOffset][0].fill(out[0]);\n\t\t\t\t\telse outputs[j + outputOffset][0].set(out);\n\t\t\t\t\tthis.$internalParamsBuffer[j] = out[0];\n\t\t\t\t});\n\t\t\t});\n\t\t\tthis.unlock();\n\t\t\tif (!this.supportSharedArrayBuffer) {\n\t\t\t\tthis.call('setBuffer', { lock: this.$lock, paramsBuffer: this.$internalParamsBuffer });\n\t\t\t}\n\t\t\tconst { currentTime } = audioWorkletGlobalScope;\n\t\t\tlet $event;\n\t\t\tfor ($event = 0; $event < this.eventQueue.length; $event++) {\n\t\t\t\tconst event = this.eventQueue[$event];\n\t\t\t\tif (event.time && event.time > currentTime) break;\n\t\t\t\tif (typeof this.handleEvent === 'function') this.handleEvent(event);\n\t\t\t\tthis.call('dispatchWamEvent', event);\n\t\t\t}\n\t\t\tif ($event) this.eventQueue.splice(0, $event);\n\t\t\treturn true;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} wamInstanceId\n\t\t * @param {number} [output]\n\t\t */\n\t\tconnectEvents(wamInstanceId, output) {\n\t\t\twebAudioModules.connectEvents(this.instanceId, wamInstanceId, output);\n\t\t}\n\n\t\t/**\n\t\t * @param {string} [wamInstanceId]\n\t\t * @param {number} [output]\n\t\t */\n\t\tdisconnectEvents(wamInstanceId, output) {\n\t\t\tif (typeof wamInstanceId === 'undefined') {\n\t\t\t\twebAudioModules.disconnectEvents(this.instanceId);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\twebAudioModules.disconnectEvents(this.instanceId, wamInstanceId, output);\n\t\t}\n\n\t\tdestroy() {\n\t\t\taudioWorkletGlobalScope.webAudioModules.destroy(this);\n\t\t\tthis.destroyed = true;\n\t\t\tthis.port.close();\n\t\t}\n\t}\n\ttry {\n\t\tregisterProcessor(processorId, ParamMgrProcessor);\n\t} catch (error) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.warn(error);\n\t}\n};\nexport default processor;\n", "/** @typedef {import('@webaudiomodules/api').WamParameterConfiguration} WamParameterConfiguration */\n/** @typedef {import('@webaudiomodules/api').WamParameterInfoMap} WamParameterInfoMap */\n/** @typedef {import('./types').ParametersMapping} ParametersMapping */\n/** @typedef {import('./types').InternalParametersDescriptor} InternalParametersDescriptor */\n/** @typedef {import('./types').ParametersMappingConfiguratorOptions} ParametersMappingConfiguratorOptions */\n\nimport { getWamParameterInfo } from './sdk';\n\nconst WamParameterInfo = getWamParameterInfo();\n\nexport default class ParamMappingConfigurator {\n\t/**\n\t * @param {ParametersMappingConfiguratorOptions} [options = {}]\n\t */\n\tconstructor(options = {}) {\n\t\tconst { paramsConfig, paramsMapping, internalParamsConfig } = options;\n\t\tthis._paramsConfig = paramsConfig;\n\t\tthis._paramsMapping = paramsMapping;\n\t\tthis._internalParamsConfig = internalParamsConfig;\n\t}\n\n\t/**\n\t * @private\n\t * @type {Record<string, WamParameterConfiguration>}\n\t */\n\t_paramsConfig = undefined;\n\n\t/**\n\t * Auto-completed `paramsConfig`:\n\t *\n\t * if no `paramsConfig` is defined while initializing, this will be be filled from the internalParamsConfig;\n\t *\n\t * if a parameter is not fully configured, the incompleted properties will have the same value as in the internalParamsConfig.\n\t *\n\t * @type {WamParameterInfoMap}\n\t */\n\tget paramsConfig() {\n\t\tconst { internalParamsConfig } = this;\n\t\treturn Object.entries(this._paramsConfig || internalParamsConfig)\n\t\t\t.reduce((configs, [id, config]) => {\n\t\t\t\tconst internalParam = internalParamsConfig[id];\n\t\t\t\tconfigs[id] = new WamParameterInfo(id, {\n\t\t\t\t\t...config,\n\t\t\t\t\tlabel: config.label ?? id,\n\t\t\t\t\tdefaultValue: config.defaultValue ?? internalParam?.defaultValue,\n\t\t\t\t\tminValue: config.minValue ?? internalParam?.minValue,\n\t\t\t\t\tmaxValue: config.maxValue ?? internalParam?.maxValue,\n\t\t\t\t});\n\t\t\t\treturn configs;\n\t\t\t}, {});\n\t}\n\n\t/**\n\t * @private\n\t * @type {InternalParametersDescriptor}\n\t */\n\t_internalParamsConfig = undefined;\n\n\t/**\n\t * Auto-completed configuration of the `internalParamsConfig`\n\t *\n\t * Internal Parameters Config contains all the automatable parameters' information.\n\t *\n\t * An automatable parameter could be a `WebAudio` `AudioParam`\n\t * or a config with an `onChange` callback that will be called while the value has been changed.\n\t *\n\t * @type {InternalParametersDescriptor}\n\t */\n\tget internalParamsConfig() {\n\t\treturn Object.entries(this._internalParamsConfig || {})\n\t\t\t.reduce((configs, [name, config]) => {\n\t\t\t\tif (config instanceof AudioParam) configs[name] = config;\n\t\t\t\telse {\n\t\t\t\t\tconst defaultConfig = {\n\t\t\t\t\t\tminValue: 0,\n\t\t\t\t\t\tmaxValue: 1,\n\t\t\t\t\t\tdefaultValue: 0,\n\t\t\t\t\t\tautomationRate: 30,\n\t\t\t\t\t};\n\t\t\t\t\tconfigs[name] = { ...defaultConfig, ...config };\n\t\t\t\t}\n\t\t\t\treturn configs;\n\t\t\t}, {});\n\t}\n\n\t/**\n\t * @private\n\t * @type {ParametersMapping}\n\t */\n\t_paramsMapping = {}\n\n\t/**\n\t * Auto-completed `paramsMapping`,\n\t * the mapping can be omitted while initialized,\n\t * but is useful when an exposed param (in the `paramsConfig`) should automate\n\t * several internal params (in the `internalParamsConfig`) or has a different range there.\n\t *\n\t * If a parameter is present in both `paramsConfig` and `internalParamsConfig` (or the `paramsConfig` is not configured),\n\t * a map of this parameter will be there automatically, if not declared explicitly.\n\t *\n\t * @type {ParametersMapping}\n\t */\n\tget paramsMapping() {\n\t\tconst declared = this._paramsMapping || {};\n\t\tconst externalParams = this.paramsConfig;\n\t\tconst internalParams = this.internalParamsConfig;\n\t\treturn Object.entries(externalParams)\n\t\t\t.reduce((mapping, [name, { minValue, maxValue }]) => {\n\t\t\t\tconst sourceRange = [minValue, maxValue];\n\t\t\t\tconst defaultMapping = { sourceRange, targetRange: [...sourceRange] };\n\t\t\t\tif (declared[name]) {\n\t\t\t\t\tconst declaredTargets = Object.entries(declared[name])\n\t\t\t\t\t\t.reduce((targets, [targetName, targetMapping]) => {\n\t\t\t\t\t\t\tif (internalParams[targetName]) {\n\t\t\t\t\t\t\t\ttargets[targetName] = { ...defaultMapping, ...targetMapping };\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn targets;\n\t\t\t\t\t\t}, {});\n\t\t\t\t\tmapping[name] = declaredTargets;\n\t\t\t\t} else if (internalParams[name]) {\n\t\t\t\t\tmapping[name] = { [name]: { ...defaultMapping } };\n\t\t\t\t}\n\t\t\t\treturn mapping;\n\t\t\t}, {});\n\t}\n}\n", "/** @typedef {import('@webaudiomodules/api').WamParameter} WamParameter */\n/** @typedef {import('@webaudiomodules/api').WamParameterInfo} WamParameterInfo */\n\n/**\n * @extends {AudioParam}\n * @implements {WamParameter}\n */\nexport default class MgrAudioParam extends AudioParam {\n\tget exponent() {\n\t\treturn this.info.exponent;\n\t}\n\n\t/**\n\t * @type {WamParameterInfo}\n\t */\n\t_info = undefined;\n\n\tget info() {\n\t\treturn this._info;\n\t}\n\n\tset info(info) {\n\t\tthis._info = info;\n\t}\n\n\tset normalizedValue(valueIn) {\n\t\tthis.value = this.info.denormalize(valueIn);\n\t}\n\n\tget normalizedValue() {\n\t\treturn this.info.normalize(this.value);\n\t}\n\n\tsetValueAtTime(value, startTime) {\n\t\treturn super.setValueAtTime(value, startTime);\n\t}\n\n\tsetNormalizedValueAtTime(valueIn, startTime) {\n\t\tconst value = this.info.denormalize(valueIn);\n\t\treturn this.setValueAtTime(value, startTime);\n\t}\n\n\tlinearRampToValueAtTime(value, endTime) {\n\t\treturn super.linearRampToValueAtTime(value, endTime);\n\t}\n\n\tlinearRampToNormalizedValueAtTime(valueIn, endTime) {\n\t\tconst value = this.info.denormalize(valueIn);\n\t\treturn this.linearRampToValueAtTime(value, endTime);\n\t}\n\n\texponentialRampToValueAtTime(value, endTime) {\n\t\treturn super.exponentialRampToValueAtTime(value, endTime);\n\t}\n\n\texponentialRampToNormalizedValueAtTime(valueIn, endTime) {\n\t\tconst value = this.info.denormalize(valueIn);\n\t\treturn this.exponentialRampToValueAtTime(value, endTime);\n\t}\n\n\tsetTargetAtTime(target, startTime, timeConstant) {\n\t\treturn super.setTargetAtTime(target, startTime, timeConstant);\n\t}\n\n\tsetNormalizedTargetAtTime(targetIn, startTime, timeConstant) {\n\t\tconst target = this.info.denormalize(targetIn);\n\t\treturn this.setTargetAtTime(target, startTime, timeConstant);\n\t}\n\n\tsetValueCurveAtTime(values, startTime, duration) {\n\t\treturn super.setValueCurveAtTime(values, startTime, duration);\n\t}\n\n\tsetNormalizedValueCurveAtTime(valuesIn, startTime, duration) {\n\t\tconst values = Array.from(valuesIn).map((v) => this.info.denormalize(v));\n\t\treturn this.setValueCurveAtTime(values, startTime, duration);\n\t}\n\n\tcancelScheduledParamValues(cancelTime) {\n\t\treturn super.cancelScheduledValues(cancelTime);\n\t}\n\n\tcancelAndHoldParamAtTime(cancelTime) {\n\t\treturn super.cancelAndHoldAtTime(cancelTime);\n\t}\n}\n", "import MgrAudioParam from './MgrAudioParam.js';\n\n/** @typedef {import('@webaudiomodules/api').WebAudioModule} WebAudioModule */\n/** @typedef {import('@webaudiomodules/api').WamNode} WamNode */\n/** @typedef {import('@webaudiomodules/api').WamParameterDataMap} WamParameterValueMap */\n/** @typedef {import('@webaudiomodules/api').WamEvent} WamEvent */\n/** @typedef {import('@webaudiomodules/api').WamAutomationEvent} WamAutomationEvent */\n/** @typedef {import('./types').ParamMgrOptions} ParamMgrOptions */\n/** @typedef {import('./types').ParamMgrCallFromProcessor} ParamMgrCallFromProcessor */\n/** @typedef {import('./types').ParamMgrCallToProcessor} ParamMgrCallToProcessor */\n/** @typedef {import('./types').ParamMgrNodeMsgIn} ParamMgrNodeMsgIn */\n/** @typedef {import('./types').ParamMgrNodeMsgOut} ParamMgrNodeMsgOut */\n/** @typedef {import('./types').ParamMgrNode} IParamMgrNode */\n\n/** @type {typeof import('./TypedAudioWorklet').TypedAudioWorkletNode} */\n// @ts-ignore\nconst AudioWorkletNode = globalThis.AudioWorkletNode;\n\n/**\n * @extends {AudioWorkletNode<ParamMgrNodeMsgIn, ParamMgrNodeMsgOut>}\n * @implements {IParamMgrNode}\n */\nexport default class ParamMgrNode extends AudioWorkletNode {\n\t/**\n     * @param {WebAudioModule} module\n     * @param {ParamMgrOptions} options\n     */\n\tconstructor(module, options) {\n\t\tsuper(module.audioContext, module.moduleId, {\n\t\t\tnumberOfInputs: 0,\n\t\t\tnumberOfOutputs: 1 + options.processorOptions.internalParams.length,\n\t\t\tparameterData: options.parameterData,\n\t\t\tprocessorOptions: options.processorOptions,\n\t\t});\n\t\tconst { processorOptions, internalParamsConfig } = options;\n\t\tthis.initialized = false;\n\t\tthis.module = module;\n\t\tthis.paramsConfig = processorOptions.paramsConfig;\n\t\tthis.internalParams = processorOptions.internalParams;\n\t\tthis.internalParamsConfig = internalParamsConfig;\n\t\tthis.$prevParamsBuffer = new Float32Array(this.internalParams.length);\n\t\tthis.paramsUpdateCheckFn = [];\n\t\tthis.paramsUpdateCheckFnRef = [];\n\t\tthis.messageRequestId = 0;\n\n\t\tObject.entries(this.getParams()).forEach(([name, param]) => {\n\t\t\tObject.setPrototypeOf(param, MgrAudioParam.prototype);\n\t\t\tparam._info = this.paramsConfig[name];\n\t\t});\n\n\t\t/** @type {Record<number, ((...args: any[]) => any)>} */\n\t\tconst resolves = {};\n\t\t/** @type {Record<number, ((...args: any[]) => any)>} */\n\t\tconst rejects = {};\n\t\t/**\n\t\t * @param {keyof ParamMgrCallToProcessor} call\n\t\t * @param {any} args\n\t\t */\n\t\tthis.call = (call, ...args) => {\n\t\t\tconst id = this.messageRequestId;\n\t\t\tthis.messageRequestId += 1;\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tresolves[id] = resolve;\n\t\t\t\trejects[id] = reject;\n\t\t\t\tthis.port.postMessage({ id, call, args });\n\t\t\t});\n\t\t};\n\t\tthis.handleMessage = ({ data }) => {\n\t\t\tconst { id, call, args, value, error } = data;\n\t\t\tif (call) {\n\t\t\t\t/** @type {any} */\n\t\t\t\tconst r = { id };\n\t\t\t\ttry {\n\t\t\t\t\tr.value = this[call](...args);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tr.error = e;\n\t\t\t\t}\n\t\t\t\tthis.port.postMessage(r);\n\t\t\t} else {\n\t\t\t\tif (error) {\n\t\t\t\t\tif (rejects[id]) rejects[id](error);\n\t\t\t\t\tdelete rejects[id];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (resolves[id]) {\n\t\t\t\t\tresolves[id](value);\n\t\t\t\t\tdelete resolves[id];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tthis.port.start();\n\t\tthis.port.addEventListener('message', this.handleMessage);\n\t}\n\n\t/**\n\t * @returns {ReadonlyMap<string, MgrAudioParam>}\n\t */\n\tget parameters() {\n\t\t// @ts-ignore\n\t\treturn super.parameters;\n\t}\n\n\tget processorId() {\n\t\treturn this.module.moduleId;\n\t}\n\n\tget instanceId() {\n\t\treturn this.module.instanceId;\n\t}\n\n\tasync initialize() {\n\t\t/** @type {ReturnType<ParamMgrCallToProcessor['getBuffer']>} */\n\t\tconst response = await this.call('getBuffer');\n\t\tconst { lock, paramsBuffer } = response;\n\t\tthis.$lock = lock;\n\t\tthis.$paramsBuffer = paramsBuffer;\n\t\tconst offset = 1;\n\t\tObject.entries(this.internalParamsConfig).forEach(([name, config], i) => {\n\t\t\tif (this.context.state === 'suspended') this.$paramsBuffer[i] = config.defaultValue;\n\t\t\tif (config instanceof AudioParam) {\n\t\t\t\ttry {\n\t\t\t\t\tconfig.automationRate = 'a-rate';\n\t\t\t\t// eslint-disable-next-line no-empty\n\t\t\t\t} catch {\n\t\t\t\t} finally {\n\t\t\t\t\tconfig.value = Math.max(0, config.minValue);\n\t\t\t\t\tthis.connect(config, offset + i);\n\t\t\t\t}\n\t\t\t} else if (config instanceof AudioNode) {\n\t\t\t\tthis.connect(config, offset + i);\n\t\t\t} else {\n\t\t\t\tthis.requestDispatchIParamChange(name);\n\t\t\t}\n\t\t});\n\t\tthis.connect(this.module.audioContext.destination, 0, 0);\n\t\tthis.initialized = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param {ReturnType<ParamMgrCallToProcessor['getBuffer']>} buffer\n\t */\n\tsetBuffer({ lock, paramsBuffer }) {\n\t\tthis.$lock = lock;\n\t\tthis.$paramsBuffer = paramsBuffer;\n\t}\n\n\tsetParamsMapping(paramsMapping) {\n\t\treturn this.call('setParamsMapping', paramsMapping);\n\t}\n\n\tgetCompensationDelay() {\n\t\treturn this.call('getCompensationDelay');\n\t}\n\n\tgetParameterInfo(...parameterIdQuery) {\n\t\treturn this.call('getParameterInfo', ...parameterIdQuery);\n\t}\n\n\tgetParameterValues(normalized, ...parameterIdQuery) {\n\t\treturn this.call('getParameterValues', normalized, ...parameterIdQuery);\n\t}\n\n\t/**\n\t * @param {WamAutomationEvent} event\n\t */\n\tscheduleAutomation(event) {\n\t\tconst time = event.time || this.context.currentTime;\n\t\tconst { id, normalized, value } = event.data;\n\t\tconst audioParam = this.getParam(id);\n\t\tif (!audioParam) return;\n\t\tif (audioParam.info.type === 'float') {\n\t\t\tif (normalized) audioParam.linearRampToNormalizedValueAtTime(value, time);\n\t\t\telse audioParam.linearRampToValueAtTime(value, time);\n\t\t} else {\n\t\t\t// eslint-disable-next-line no-lonely-if\n\t\t\tif (normalized) audioParam.setNormalizedValueAtTime(value, time);\n\t\t\telse audioParam.setValueAtTime(value, time);\n\t\t}\n\t}\n\n\t/**\n\t * @param {WamEvent[]} events\n\t */\n\tscheduleEvents(...events) {\n\t\tevents.forEach((event) => {\n\t\t\tif (event.type === 'wam-automation') {\n\t\t\t\tthis.scheduleAutomation(event);\n\t\t\t}\n\t\t});\n\t\tthis.call('scheduleEvents', ...events);\n\t}\n\n\t/**\n\t * @param {WamEvent[]} events\n\t */\n\temitEvents(...events) {\n\t\tthis.call('emitEvents', ...events);\n\t}\n\n\tclearEvents() {\n\t\tthis.call('clearEvents');\n\t}\n\n\t/**\n\t * @param {WamEvent} event\n\t */\n\tdispatchWamEvent(event) {\n\t\tif (event.type === 'wam-automation') {\n\t\t\tthis.scheduleAutomation(event);\n\t\t} else {\n\t\t\tthis.dispatchEvent(new CustomEvent(event.type, { detail: event }));\n\t\t}\n\t}\n\n\t/**\n\t * @param {WamParameterValueMap} parameterValues\n\t */\n\tasync setParameterValues(parameterValues) {\n\t\tObject.keys(parameterValues).forEach((parameterId) => {\n\t\t\tconst parameterUpdate = parameterValues[parameterId];\n\t\t\tconst parameter = this.parameters.get(parameterId);\n\t\t\tif (!parameter) return;\n\t\t\tif (!parameterUpdate.normalized) parameter.value = parameterUpdate.value;\n\t\t\telse parameter.normalizedValue = parameterUpdate.value;\n\t\t});\n\t}\n\n\tasync getState() {\n\t\treturn this.getParamsValues();\n\t}\n\n\tasync setState(state) {\n\t\tthis.setParamsValues(state);\n\t}\n\n\tconvertTimeToFrame(time) {\n\t\treturn Math.round(time * this.context.sampleRate);\n\t}\n\n\tconvertFrameToTime(frame) {\n\t\treturn frame / this.context.sampleRate;\n\t}\n\n\t/**\n\t * @param {string} name\n\t */\n\trequestDispatchIParamChange = (name) => {\n\t\tconst config = this.internalParamsConfig[name];\n\t\tif (!('onChange' in config)) return;\n\t\tconst { automationRate, onChange } = config;\n\t\tif (typeof automationRate !== 'number' || !automationRate) return;\n\t\tconst interval = 1000 / automationRate;\n\t\tconst i = this.internalParams.indexOf(name);\n\t\tif (i === -1) return;\n\t\tif (i >= this.internalParams.length) return;\n\t\tif (typeof this.paramsUpdateCheckFnRef[i] === 'number') {\n\t\t\twindow.clearTimeout(this.paramsUpdateCheckFnRef[i]);\n\t\t}\n\n\t\tthis.paramsUpdateCheckFn[i] = () => {\n\t\t\tconst prev = this.$prevParamsBuffer[i];\n\t\t\tconst cur = this.$paramsBuffer[i];\n\t\t\tif (cur !== prev) {\n\t\t\t\tonChange(cur, prev);\n\t\t\t\tthis.$prevParamsBuffer[i] = cur;\n\t\t\t}\n\t\t\tthis.paramsUpdateCheckFnRef[i] = window.setTimeout(this.paramsUpdateCheckFn[i], interval);\n\t\t};\n\t\tthis.paramsUpdateCheckFn[i]();\n\t}\n\n\t/**\n\t * @param {string} name\n\t */\n\tgetIParamIndex(name) {\n\t\tconst i = this.internalParams.indexOf(name);\n\t\treturn i === -1 ? null : i;\n\t}\n\n\t/**\n\t * @param {string} name\n\t * @param {AudioParam | AudioNode} dest\n\t * @param {number} index\n\t */\n\tconnectIParam(name, dest, index) {\n\t\tconst offset = 1;\n\t\tconst i = this.getIParamIndex(name);\n\t\tif (i !== null) {\n\t\t\tif (dest instanceof AudioNode) {\n\t\t\t\tif (typeof index === 'number') this.connect(dest, offset + i, index);\n\t\t\t\telse this.connect(dest, offset + i);\n\t\t\t} else {\n\t\t\t\tthis.connect(dest, offset + i);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} name\n\t * @param {AudioParam | AudioNode} dest\n\t * @param {number} index\n\t */\n\tdisconnectIParam(name, dest, index) {\n\t\tconst offset = 1;\n\t\tconst i = this.getIParamIndex(name);\n\t\tif (i !== null) {\n\t\t\tif (dest instanceof AudioNode) {\n\t\t\t\tif (typeof index === 'number') this.disconnect(dest, offset + i, index);\n\t\t\t\telse this.disconnect(dest, offset + i);\n\t\t\t} else {\n\t\t\t\tthis.disconnect(dest, offset + i);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetIParamValue(name) {\n\t\tconst i = this.getIParamIndex(name);\n\t\treturn i !== null ? this.$paramsBuffer[i] : null;\n\t}\n\n\tgetIParamsValues() {\n\t\t/** @type {Record<string, number>} */\n\t\tconst values = {};\n\t\tthis.internalParams.forEach((name, i) => {\n\t\t\tvalues[name] = this.$paramsBuffer[i];\n\t\t});\n\t\treturn values;\n\t}\n\n\tgetParam(name) {\n\t\treturn this.parameters.get(name) || null;\n\t}\n\n\tgetParams() {\n\t\t// @ts-ignore\n\t\treturn Object.fromEntries(this.parameters);\n\t}\n\n\tgetParamValue(name) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return null;\n\t\treturn param.value;\n\t}\n\n\tsetParamValue(name, value) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return;\n\t\tparam.value = value;\n\t}\n\n\tgetParamsValues() {\n\t\t/** @type {Record<string, number>} */\n\t\tconst values = {};\n\t\tthis.parameters.forEach((v, k) => {\n\t\t\tvalues[k] = v.value;\n\t\t});\n\t\treturn values;\n\t}\n\n\t/**\n\t * @param {Record<string, number>} values\n\t */\n\tsetParamsValues(values) {\n\t\tif (!values) return;\n\t\tObject.entries(values).forEach(([k, v]) => {\n\t\t\tthis.setParamValue(k, v);\n\t\t});\n\t}\n\n\tgetNormalizedParamValue(name) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return null;\n\t\treturn param.normalizedValue;\n\t}\n\n\tsetNormalizedParamValue(name, value) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return;\n\t\tparam.normalizedValue = value;\n\t}\n\n\tgetNormalizedParamsValues() {\n\t\tconst values = {};\n\t\tthis.parameters.forEach((v, k) => {\n\t\t\tvalues[k] = this.getNormalizedParamValue(k);\n\t\t});\n\t\treturn values;\n\t}\n\n\tsetNormalizedParamsValues(values) {\n\t\tif (!values) return;\n\t\tObject.entries(values).forEach(([k, v]) => {\n\t\t\tthis.setNormalizedParamValue(k, v);\n\t\t});\n\t}\n\n\tsetParamValueAtTime(name, value, startTime) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return null;\n\t\treturn param.setValueAtTime(value, startTime);\n\t}\n\n\tsetNormalizedParamValueAtTime(name, value, startTime) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return null;\n\t\treturn param.setNormalizedValueAtTime(value, startTime);\n\t}\n\n\tlinearRampToParamValueAtTime(name, value, endTime) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return null;\n\t\treturn param.linearRampToValueAtTime(value, endTime);\n\t}\n\n\tlinearRampToNormalizedParamValueAtTime(name, value, endTime) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return null;\n\t\treturn param.linearRampToNormalizedValueAtTime(value, endTime);\n\t}\n\n\texponentialRampToParamValueAtTime(name, value, endTime) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return null;\n\t\treturn param.exponentialRampToValueAtTime(value, endTime);\n\t}\n\n\texponentialRampToNormalizedParamValueAtTime(name, value, endTime) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return null;\n\t\treturn param.exponentialRampToNormalizedValueAtTime(value, endTime);\n\t}\n\n\tsetParamTargetAtTime(name, target, startTime, timeConstant) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return null;\n\t\treturn param.setTargetAtTime(target, startTime, timeConstant);\n\t}\n\n\tsetNormalizedParamTargetAtTime(name, target, startTime, timeConstant) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return null;\n\t\treturn param.setNormalizedTargetAtTime(target, startTime, timeConstant);\n\t}\n\n\tsetParamValueCurveAtTime(name, values, startTime, duration) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return null;\n\t\treturn param.setValueCurveAtTime(values, startTime, duration);\n\t}\n\n\tsetNormalizedParamValueCurveAtTime(name, values, startTime, duration) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return null;\n\t\treturn param.setNormalizedValueCurveAtTime(values, startTime, duration);\n\t}\n\n\tcancelScheduledParamValues(name, cancelTime) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return null;\n\t\treturn param.cancelScheduledValues(cancelTime);\n\t}\n\n\tcancelAndHoldParamAtTime(name, cancelTime) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return null;\n\t\treturn param.cancelAndHoldAtTime(cancelTime);\n\t}\n\n\t/**\n\t * @param {string} toId\n\t * @param {number} [output]\n\t */\n\tconnectEvents(toId, output) {\n\t\tthis.call('connectEvents', toId, output);\n\t}\n\n\t/**\n\t * @param {string} [toId]\n\t * @param {number} [output]\n\t */\n\tdisconnectEvents(toId, output) {\n\t\tthis.call('disconnectEvents', toId, output);\n\t}\n\n\tasync destroy() {\n\t\tthis.disconnect();\n\t\tthis.paramsUpdateCheckFnRef.forEach((ref) => {\n\t\t\tif (typeof ref === 'number') window.clearTimeout(ref);\n\t\t});\n\t\tawait this.call('destroy');\n\t\tthis.port.close();\n\t}\n}\n", "import { addFunctionModule } from './sdk';\nimport processor from './ParamMgrProcessor.js';\nimport ParamMappingConfigurator from './ParamConfigurator.js';\nimport ParamMgrNode from './ParamMgrNode.js';\n/** @typedef {import('@webaudiomodules/api').WebAudioModule} WebAudioModule */\n/** @typedef {import('./types').ParametersMappingConfiguratorOptions} ParametersMappingConfiguratorOptions */\n/** @typedef {import('./types').ParamMgrOptions} ParamMgrOptions */\n/** @typedef {import('./types').AudioWorkletRegister} AudioWorkletRegister */\n\nexport default class ParamMgrFactory {\n\t/**\n\t * @param {WebAudioModule} module\n\t * @param {ParametersMappingConfiguratorOptions} [optionsIn = {}]\n\t */\n\tstatic async create(module, optionsIn = {}) {\n\t\tconst { audioContext, moduleId: processorId, instanceId } = module;\n\t\tconst { paramsConfig, paramsMapping, internalParamsConfig } = new ParamMappingConfigurator(optionsIn);\n\t\tconst initialParamsValue = Object.entries(paramsConfig)\n\t\t\t.reduce((currentParams, [name, { defaultValue }]) => {\n\t\t\t\tcurrentParams[name] = defaultValue;\n\t\t\t\treturn currentParams;\n\t\t\t}, {});\n\t\tconst serializableParamsConfig = Object.entries(paramsConfig)\n\t\t\t.reduce((currentParams, [name, { id, label, type, defaultValue, minValue, maxValue, discreteStep, exponent, choices, units }]) => {\n\t\t\t\tcurrentParams[name] = { id, label, type, defaultValue, minValue, maxValue, discreteStep, exponent, choices, units };\n\t\t\t\treturn currentParams;\n\t\t\t}, {});\n\t\tawait addFunctionModule(audioContext.audioWorklet, processor, processorId, serializableParamsConfig);\n\t\t/** @type {ParamMgrOptions} */\n\t\tconst options = {\n\t\t\tinternalParamsConfig,\n\t\t\tparameterData: initialParamsValue,\n\t\t\tprocessorOptions: {\n\t\t\t\tparamsConfig,\n\t\t\t\tparamsMapping,\n\t\t\t\tinternalParamsMinValues: Object.values(internalParamsConfig)\n\t\t\t\t\t.map((config) => Math.max(0, config?.minValue || 0)),\n\t\t\t\tinternalParams: Object.keys(internalParamsConfig),\n\t\t\t\tinstanceId,\n\t\t\t\tprocessorId,\n\t\t\t},\n\t\t};\n\t\tconst node = new ParamMgrNode(module, options);\n\t\tawait node.initialize();\n\t\treturn node;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
